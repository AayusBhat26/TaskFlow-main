// Extended DSA Questions - Part 2
// This file contains additional questions covering remaining topics

export const extendedDSAQuestions = [
  // ========== DYNAMIC PROGRAMMING ==========
  {
    title: "Climbing Stairs",
    description: "You are climbing a staircase. It takes n steps to reach the top. Each time you can climb 1 or 2 steps.",
    topic: "Dynamic Programming",
    difficulty: "EASY" as const,
    leetcodeUrl: "https://leetcode.com/problems/climbing-stairs/",
    platform: "LeetCode",
    tags: ["Dynamic Programming", "Math"],
    companies: ["Amazon", "Microsoft", "Apple", "Adobe"],
    frequency: 9,
    timeComplexity: "O(n)",
    spaceComplexity: "O(1)",
    approach: "Bottom-up DP with space optimization",
    source: "Both"
  },
  {
    title: "Coin Change",
    description: "Find the fewest number of coins needed to make up the amount",
    topic: "Dynamic Programming",
    difficulty: "MEDIUM" as const,
    leetcodeUrl: "https://leetcode.com/problems/coin-change/",
    platform: "LeetCode", 
    tags: ["Dynamic Programming"],
    companies: ["Amazon", "Google", "Microsoft"],
    frequency: 9,
    timeComplexity: "O(amount * coins)",
    spaceComplexity: "O(amount)",
    approach: "Bottom-up DP",
    source: "Both"
  },
  {
    title: "Longest Increasing Subsequence",
    description: "Find the length of the longest strictly increasing subsequence",
    topic: "Dynamic Programming",
    difficulty: "MEDIUM" as const,
    leetcodeUrl: "https://leetcode.com/problems/longest-increasing-subsequence/",
    platform: "LeetCode",
    tags: ["Dynamic Programming", "Binary Search"],
    companies: ["Amazon", "Microsoft", "Google"],
    frequency: 8,
    timeComplexity: "O(n log n)",
    spaceComplexity: "O(n)",
    approach: "DP with binary search optimization",
    source: "Both"
  },
  {
    title: "0/1 Knapsack Problem",
    description: "Maximum value that can be obtained with given weight and values",
    topic: "Dynamic Programming",
    difficulty: "MEDIUM" as const,
    platform: "GeeksforGeeks",
    tags: ["Dynamic Programming"],
    companies: ["Amazon", "Microsoft", "Google"],
    frequency: 8,
    timeComplexity: "O(n*W)",
    spaceComplexity: "O(n*W)",
    approach: "2D DP table",
    source: "Love Babbar"
  },
  {
    title: "Edit Distance",
    description: "Minimum number of operations to convert one string to another",
    topic: "Dynamic Programming",
    difficulty: "HARD" as const,
    leetcodeUrl: "https://leetcode.com/problems/edit-distance/",
    platform: "LeetCode",
    tags: ["String", "Dynamic Programming"],
    companies: ["Amazon", "Google", "Microsoft"],
    frequency: 8,
    timeComplexity: "O(m*n)",
    spaceComplexity: "O(m*n)",
    approach: "2D DP with three operations",
    source: "Both"
  },

  // ========== GRAPHS ==========
  {
    title: "Number of Islands",
    description: "Count the number of islands in a 2D binary grid",
    topic: "Graph",
    difficulty: "MEDIUM" as const,
    leetcodeUrl: "https://leetcode.com/problems/number-of-islands/",
    platform: "LeetCode",
    tags: ["Graph", "DFS", "BFS", "Union Find"],
    companies: ["Amazon", "Microsoft", "Google", "Facebook"],
    frequency: 10,
    timeComplexity: "O(m*n)",
    spaceComplexity: "O(m*n)",
    approach: "DFS or BFS traversal",
    source: "Both"
  },
  {
    title: "Course Schedule",
    description: "Determine if you can finish all courses given prerequisites",
    topic: "Graph",
    difficulty: "MEDIUM" as const,
    leetcodeUrl: "https://leetcode.com/problems/course-schedule/",
    platform: "LeetCode",
    tags: ["Graph", "Topological Sort", "DFS", "BFS"],
    companies: ["Amazon", "Microsoft", "Google"],
    frequency: 8,
    timeComplexity: "O(V+E)",
    spaceComplexity: "O(V+E)",
    approach: "Topological sorting using DFS",
    source: "Striver"
  },
  {
    title: "Clone Graph",
    description: "Return a deep copy of an undirected graph",
    topic: "Graph",
    difficulty: "MEDIUM" as const,
    leetcodeUrl: "https://leetcode.com/problems/clone-graph/",
    platform: "LeetCode",
    tags: ["Graph", "DFS", "BFS", "Hash Table"],
    companies: ["Amazon", "Microsoft", "Google", "Facebook"],
    frequency: 7,
    timeComplexity: "O(V+E)",
    spaceComplexity: "O(V)",
    approach: "DFS with HashMap for visited nodes",
    source: "Striver"
  },
  {
    title: "Dijkstra's Shortest Path",
    description: "Find shortest path from source to all vertices",
    topic: "Graph",
    difficulty: "MEDIUM" as const,
    platform: "GeeksforGeeks",
    tags: ["Graph", "Heap", "Shortest Path"],
    companies: ["Amazon", "Microsoft", "Google"],
    frequency: 7,
    timeComplexity: "O((V+E) log V)",
    spaceComplexity: "O(V)",
    approach: "Priority queue with relaxation",
    source: "Both"
  },
  {
    title: "Detect Cycle in Directed Graph",
    description: "Detect cycle in a directed graph using DFS",
    topic: "Graph",
    difficulty: "MEDIUM" as const,
    platform: "GeeksforGeeks",
    tags: ["Graph", "DFS"],
    companies: ["Amazon", "Microsoft"],
    frequency: 7,
    timeComplexity: "O(V+E)",
    spaceComplexity: "O(V)",
    approach: "DFS with color coding",
    source: "Love Babbar"
  },

  // ========== STACKS AND QUEUES ==========
  {
    title: "Valid Parentheses",
    description: "Determine if the parentheses string is valid",
    topic: "Stack",
    difficulty: "EASY" as const,
    leetcodeUrl: "https://leetcode.com/problems/valid-parentheses/",
    platform: "LeetCode",
    tags: ["Stack", "String"],
    companies: ["Amazon", "Microsoft", "Google", "Facebook"],
    frequency: 10,
    timeComplexity: "O(n)",
    spaceComplexity: "O(n)",
    approach: "Stack to match opening and closing brackets",
    source: "Both"
  },
  {
    title: "Next Greater Element",
    description: "Find next greater element for each element in array",
    topic: "Stack",
    difficulty: "EASY" as const,
    leetcodeUrl: "https://leetcode.com/problems/next-greater-element-i/",
    platform: "LeetCode",
    tags: ["Stack", "Array", "Hash Table"],
    companies: ["Amazon", "Microsoft"],
    frequency: 7,
    timeComplexity: "O(n)",
    spaceComplexity: "O(n)",
    approach: "Monotonic stack",
    source: "Love Babbar"
  },
  {
    title: "Largest Rectangle in Histogram",
    description: "Find the area of largest rectangle in histogram",
    topic: "Stack",
    difficulty: "HARD" as const,
    leetcodeUrl: "https://leetcode.com/problems/largest-rectangle-in-histogram/",
    platform: "LeetCode",
    tags: ["Stack", "Array"],
    companies: ["Amazon", "Microsoft", "Google"],
    frequency: 8,
    timeComplexity: "O(n)",
    spaceComplexity: "O(n)",
    approach: "Stack to find previous and next smaller elements",
    source: "Both"
  },
  {
    title: "Implement Queue using Stacks",
    description: "Implement a first in first out queue using only two stacks",
    topic: "Queue",
    difficulty: "EASY" as const,
    leetcodeUrl: "https://leetcode.com/problems/implement-queue-using-stacks/",
    platform: "LeetCode",
    tags: ["Stack", "Queue", "Design"],
    companies: ["Amazon", "Microsoft", "Apple"],
    frequency: 7,
    timeComplexity: "O(1) amortized",
    spaceComplexity: "O(n)",
    approach: "Two stacks with lazy transfer",
    source: "Both"
  },
  {
    title: "Sliding Window Maximum",
    description: "Return the max value in each sliding window of size k",
    topic: "Queue",
    difficulty: "HARD" as const,
    leetcodeUrl: "https://leetcode.com/problems/sliding-window-maximum/",
    platform: "LeetCode",
    tags: ["Array", "Queue", "Sliding Window", "Heap"],
    companies: ["Amazon", "Microsoft", "Google"],
    frequency: 8,
    timeComplexity: "O(n)",
    spaceComplexity: "O(k)",
    approach: "Deque to maintain window maximum",
    source: "Both"
  },

  // ========== HEAPS ==========
  {
    title: "Kth Largest Element in Stream",
    description: "Design a class to find the kth largest element in a stream",
    topic: "Heap",
    difficulty: "EASY" as const,
    leetcodeUrl: "https://leetcode.com/problems/kth-largest-element-in-a-stream/",
    platform: "LeetCode",
    tags: ["Heap", "Design", "Tree"],
    companies: ["Amazon", "Facebook", "Google"],
    frequency: 8,
    timeComplexity: "O(log k)",
    spaceComplexity: "O(k)",
    approach: "Min heap of size k",
    source: "Striver"
  },
  {
    title: "Merge k Sorted Lists",
    description: "Merge k sorted linked lists and return as one sorted list",
    topic: "Heap", 
    difficulty: "HARD" as const,
    leetcodeUrl: "https://leetcode.com/problems/merge-k-sorted-lists/",
    platform: "LeetCode",
    tags: ["Heap", "Linked List", "Divide and Conquer"],
    companies: ["Amazon", "Microsoft", "Google", "Facebook"],
    frequency: 9,
    timeComplexity: "O(n log k)",
    spaceComplexity: "O(k)",
    approach: "Min heap or divide and conquer",
    source: "Both"
  },
  {
    title: "Top K Frequent Elements",
    description: "Return the k most frequent elements in array",
    topic: "Heap",
    difficulty: "MEDIUM" as const,
    leetcodeUrl: "https://leetcode.com/problems/top-k-frequent-elements/",
    platform: "LeetCode",
    tags: ["Heap", "Hash Table", "Bucket Sort"],
    companies: ["Amazon", "Microsoft", "Google", "Facebook"],
    frequency: 9,
    timeComplexity: "O(n log k)",
    spaceComplexity: "O(n)",
    approach: "Min heap with frequency count",
    source: "Both"
  },
  {
    title: "Find Median from Data Stream",
    description: "Design a data structure that supports adding integers and finding median",
    topic: "Heap",
    difficulty: "HARD" as const,
    leetcodeUrl: "https://leetcode.com/problems/find-median-from-data-stream/",
    platform: "LeetCode",
    tags: ["Heap", "Design", "Two Pointers"],
    companies: ["Amazon", "Microsoft", "Google", "Facebook"],
    frequency: 8,
    timeComplexity: "O(log n)",
    spaceComplexity: "O(n)",
    approach: "Two heaps (max heap for smaller half, min heap for larger half)",
    source: "Both"
  },

  // ========== BINARY SEARCH ==========
  {
    title: "Binary Search",
    description: "Search a target value in a sorted array",
    topic: "Binary Search",
    difficulty: "EASY" as const,
    leetcodeUrl: "https://leetcode.com/problems/binary-search/",
    platform: "LeetCode",
    tags: ["Binary Search", "Array"],
    companies: ["Amazon", "Microsoft", "Google"],
    frequency: 8,
    timeComplexity: "O(log n)",
    spaceComplexity: "O(1)",
    approach: "Standard binary search",
    source: "Both"
  },
  {
    title: "Search in Rotated Sorted Array",
    description: "Search target in a rotated sorted array",
    topic: "Binary Search",
    difficulty: "MEDIUM" as const,
    leetcodeUrl: "https://leetcode.com/problems/search-in-rotated-sorted-array/",
    platform: "LeetCode",
    tags: ["Binary Search", "Array"],
    companies: ["Amazon", "Microsoft", "Google", "Facebook"],
    frequency: 9,
    timeComplexity: "O(log n)",
    spaceComplexity: "O(1)",
    approach: "Modified binary search with rotation handling",
    source: "Both"
  },
  {
    title: "Find First and Last Position",
    description: "Find first and last position of element in sorted array",
    topic: "Binary Search",
    difficulty: "MEDIUM" as const,
    leetcodeUrl: "https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/",
    platform: "LeetCode",
    tags: ["Binary Search", "Array"],
    companies: ["Amazon", "Microsoft", "Google"],
    frequency: 8,
    timeComplexity: "O(log n)",
    spaceComplexity: "O(1)",
    approach: "Two binary searches for lower and upper bounds",
    source: "Both"
  },
  {
    title: "Square Root of Integer",
    description: "Find the square root of a non-negative integer",
    topic: "Binary Search",
    difficulty: "EASY" as const,
    leetcodeUrl: "https://leetcode.com/problems/sqrtx/",
    platform: "LeetCode",
    tags: ["Binary Search", "Math"],
    companies: ["Amazon", "Microsoft"],
    frequency: 7,
    timeComplexity: "O(log n)",
    spaceComplexity: "O(1)",
    approach: "Binary search on answer",
    source: "Love Babbar"
  },
  {
    title: "Search a 2D Matrix",
    description: "Search for a target value in an m x n matrix",
    topic: "Binary Search",
    difficulty: "MEDIUM" as const,
    leetcodeUrl: "https://leetcode.com/problems/search-a-2d-matrix/",
    platform: "LeetCode",
    tags: ["Binary Search", "Matrix"],
    companies: ["Amazon", "Microsoft", "Google"],
    frequency: 7,
    timeComplexity: "O(log(m*n))",
    spaceComplexity: "O(1)",
    approach: "Treat 2D matrix as 1D sorted array",
    source: "Love Babbar"
  },

  // ========== GREEDY ALGORITHMS ==========
  {
    title: "Activity Selection Problem",
    description: "Select maximum number of activities that don't overlap",
    topic: "Greedy",
    difficulty: "MEDIUM" as const,
    platform: "GeeksforGeeks",
    tags: ["Greedy", "Sorting"],
    companies: ["Amazon", "Microsoft"],
    frequency: 7,
    timeComplexity: "O(n log n)",
    spaceComplexity: "O(1)",
    approach: "Sort by end time and select greedily",
    source: "Love Babbar"
  },
  {
    title: "Fractional Knapsack",
    description: "Maximum value obtainable by putting items in knapsack with fractional items allowed",
    topic: "Greedy",
    difficulty: "MEDIUM" as const,
    platform: "GeeksforGeeks", 
    tags: ["Greedy", "Sorting"],
    companies: ["Amazon", "Microsoft"],
    frequency: 6,
    timeComplexity: "O(n log n)",
    spaceComplexity: "O(1)",
    approach: "Sort by value/weight ratio",
    source: "Love Babbar"
  },
  {
    title: "Job Scheduling Problem",
    description: "Schedule jobs to maximize profit",
    topic: "Greedy",
    difficulty: "MEDIUM" as const,
    platform: "GeeksforGeeks",
    tags: ["Greedy", "Sorting"],
    companies: ["Amazon", "Microsoft"],
    frequency: 6,
    timeComplexity: "O(n log n)",
    spaceComplexity: "O(n)",
    approach: "Sort by profit and use disjoint set",
    source: "Love Babbar"
  },
  {
    title: "Minimum Platforms",
    description: "Find minimum number of platforms required for a railway station",
    topic: "Greedy",
    difficulty: "MEDIUM" as const,
    platform: "GeeksforGeeks",
    tags: ["Greedy", "Sorting"],
    companies: ["Amazon", "Microsoft"],
    frequency: 7,
    timeComplexity: "O(n log n)",
    spaceComplexity: "O(1)",
    approach: "Sort arrival and departure times separately",
    source: "Love Babbar"
  },

  // ========== BACKTRACKING ==========
  {
    title: "N-Queens Problem",
    description: "Place N queens on NxN chessboard so that no two queens attack each other",
    topic: "Backtracking",
    difficulty: "HARD" as const,
    leetcodeUrl: "https://leetcode.com/problems/n-queens/",
    platform: "LeetCode",
    tags: ["Backtracking"],
    companies: ["Amazon", "Microsoft", "Google"],
    frequency: 7,
    timeComplexity: "O(N!)",
    spaceComplexity: "O(N²)",
    approach: "Backtracking with constraint checking",
    source: "Both"
  },
  {
    title: "Sudoku Solver",
    description: "Solve a Sudoku puzzle by filling the empty cells",
    topic: "Backtracking",
    difficulty: "HARD" as const,
    leetcodeUrl: "https://leetcode.com/problems/sudoku-solver/",
    platform: "LeetCode", 
    tags: ["Backtracking", "Hash Table"],
    companies: ["Amazon", "Microsoft", "Google"],
    frequency: 6,
    timeComplexity: "O(9^(n*n))",
    spaceComplexity: "O(n*n)",
    approach: "Backtracking with constraint propagation",
    source: "Both"
  },
  {
    title: "Generate Parentheses",
    description: "Generate all combinations of well-formed parentheses",
    topic: "Backtracking",
    difficulty: "MEDIUM" as const,
    leetcodeUrl: "https://leetcode.com/problems/generate-parentheses/",
    platform: "LeetCode",
    tags: ["Backtracking", "String"],
    companies: ["Amazon", "Microsoft", "Google", "Facebook"],
    frequency: 8,
    timeComplexity: "O(4^n / √n)",
    spaceComplexity: "O(4^n / √n)",
    approach: "Backtracking with open/close count",
    source: "Both"
  },
  {
    title: "Permutations",
    description: "Return all possible permutations of distinct integers",
    topic: "Backtracking",
    difficulty: "MEDIUM" as const,
    leetcodeUrl: "https://leetcode.com/problems/permutations/",
    platform: "LeetCode",
    tags: ["Backtracking", "Array"],
    companies: ["Amazon", "Microsoft", "Google"],
    frequency: 8,
    timeComplexity: "O(n × n!)",
    spaceComplexity: "O(n!)",
    approach: "Backtracking with swapping",
    source: "Both"
  },
  {
    title: "Combination Sum",
    description: "Find all unique combinations where candidates sum to target",
    topic: "Backtracking",
    difficulty: "MEDIUM" as const,
    leetcodeUrl: "https://leetcode.com/problems/combination-sum/",
    platform: "LeetCode",
    tags: ["Backtracking", "Array"],
    companies: ["Amazon", "Microsoft", "Google"],
    frequency: 7,
    timeComplexity: "O(N^(T/M))",
    spaceComplexity: "O(T/M)",
    approach: "Backtracking with repetition allowed",
    source: "Both"
  },

  // ========== TRIE ==========
  {
    title: "Implement Trie",
    description: "Implement a trie data structure",
    topic: "Trie",
    difficulty: "MEDIUM" as const,
    leetcodeUrl: "https://leetcode.com/problems/implement-trie-prefix-tree/",
    platform: "LeetCode",
    tags: ["Trie", "Design", "Hash Table"],
    companies: ["Amazon", "Microsoft", "Google", "Facebook"],
    frequency: 8,
    timeComplexity: "O(m)",
    spaceComplexity: "O(ALPHABET_SIZE * N * M)",
    approach: "Tree structure with character nodes",
    source: "Both"
  },
  {
    title: "Word Search II",
    description: "Find all words in a board that can be constructed from letters",
    topic: "Trie",
    difficulty: "HARD" as const,
    leetcodeUrl: "https://leetcode.com/problems/word-search-ii/",
    platform: "LeetCode",
    tags: ["Trie", "Backtracking", "Array"],
    companies: ["Amazon", "Microsoft", "Google"],
    frequency: 7,
    timeComplexity: "O(M * N * 4^L)",
    spaceComplexity: "O(K)",
    approach: "Trie + DFS backtracking",
    source: "Striver"
  },

  // ========== BIT MANIPULATION ==========
  {
    title: "Single Number",
    description: "Find the single number that appears only once",
    topic: "Bit Manipulation",
    difficulty: "EASY" as const,
    leetcodeUrl: "https://leetcode.com/problems/single-number/",
    platform: "LeetCode",
    tags: ["Bit Manipulation", "Array"],
    companies: ["Amazon", "Microsoft", "Apple"],
    frequency: 8,
    timeComplexity: "O(n)",
    spaceComplexity: "O(1)",
    approach: "XOR all numbers",
    source: "Both"
  },
  {
    title: "Number of 1 Bits",
    description: "Return the number of 1 bits in an integer",
    topic: "Bit Manipulation",
    difficulty: "EASY" as const,
    leetcodeUrl: "https://leetcode.com/problems/number-of-1-bits/",
    platform: "LeetCode",
    tags: ["Bit Manipulation"],
    companies: ["Amazon", "Microsoft", "Apple"],
    frequency: 7,
    timeComplexity: "O(1)",
    spaceComplexity: "O(1)",
    approach: "Brian Kernighan's algorithm",
    source: "Love Babbar"
  },
  {
    title: "Power of Two",
    description: "Determine if an integer is a power of two",
    topic: "Bit Manipulation",
    difficulty: "EASY" as const,
    leetcodeUrl: "https://leetcode.com/problems/power-of-two/",
    platform: "LeetCode",
    tags: ["Bit Manipulation", "Math"],
    companies: ["Amazon", "Microsoft"],
    frequency: 6,
    timeComplexity: "O(1)",
    spaceComplexity: "O(1)",
    approach: "Check if n & (n-1) == 0",
    source: "Love Babbar"
  }
];

// Summary statistics
export const questionSummary = {
  totalQuestions: extendedDSAQuestions.length,
  topicDistribution: extendedDSAQuestions.reduce((acc, q) => {
    acc[q.topic] = (acc[q.topic] || 0) + 1;
    return acc;
  }, {} as Record<string, number>),
  difficultyDistribution: extendedDSAQuestions.reduce((acc, q) => {
    acc[q.difficulty] = (acc[q.difficulty] || 0) + 1;
    return acc;
  }, {} as Record<string, number>),
  sourceDistribution: extendedDSAQuestions.reduce((acc, q) => {
    acc[q.source] = (acc[q.source] || 0) + 1;
    return acc;
  }, {} as Record<string, number>)
};

console.log('=== Extended DSA Questions Summary ===');
console.log(`Total Questions: ${questionSummary.totalQuestions}`);
console.log('Topic Distribution:', questionSummary.topicDistribution);
console.log('Difficulty Distribution:', questionSummary.difficultyDistribution);
console.log('Source Distribution:', questionSummary.sourceDistribution);
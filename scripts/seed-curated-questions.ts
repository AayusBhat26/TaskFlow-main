import { PrismaClient, Difficulty } from '@prisma/client';

const prisma = new PrismaClient();

const curatedQuestions = [
  // ARRAYS (15 questions)
  {
    title: "Two Sum",
    description: "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.",
    topic: "Array",
    difficulty: Difficulty.EASY,
    leetcodeUrl: "https://leetcode.com/problems/two-sum/",
    platform: "LeetCode",
    tags: ["Hash Table", "Array"],
    companies: ["Amazon", "Google", "Microsoft", "Apple"],
    frequency: 10,
    timeComplexity: "O(n)",
    spaceComplexity: "O(n)",
    approach: "Use a hash map to store complement values and their indices",
    isImported: false
  },
  {
    title: "Best Time to Buy and Sell Stock",
    description: "You are given an array prices where prices[i] is the price of a given stock on the ith day. Find the maximum profit you can achieve.",
    topic: "Array",
    difficulty: Difficulty.EASY,
    leetcodeUrl: "https://leetcode.com/problems/best-time-to-buy-and-sell-stock/",
    platform: "LeetCode",
    tags: ["Array", "Dynamic Programming"],
    companies: ["Amazon", "Microsoft", "Facebook", "Goldman Sachs"],
    frequency: 9,
    timeComplexity: "O(n)",
    spaceComplexity: "O(1)",
    approach: "Track minimum price seen so far and maximum profit possible",
    isImported: false
  },
  {
    title: "Contains Duplicate",
    description: "Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.",
    topic: "Array",
    difficulty: Difficulty.EASY,
    leetcodeUrl: "https://leetcode.com/problems/contains-duplicate/",
    platform: "LeetCode",
    tags: ["Array", "Hash Table", "Sorting"],
    companies: ["Amazon", "Apple", "Yahoo"],
    frequency: 6,
    timeComplexity: "O(n)",
    spaceComplexity: "O(n)",
    approach: "Use a hash set to track seen elements",
    isImported: false
  },
  {
    title: "Product of Array Except Self",
    description: "Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].",
    topic: "Array",
    difficulty: Difficulty.MEDIUM,
    leetcodeUrl: "https://leetcode.com/problems/product-of-array-except-self/",
    platform: "LeetCode",
    tags: ["Array", "Prefix Sum"],
    companies: ["Amazon", "Microsoft", "Facebook", "Apple"],
    frequency: 8,
    timeComplexity: "O(n)",
    spaceComplexity: "O(1)",
    approach: "Use left and right pass to calculate products",
    isImported: false
  },
  {
    title: "Maximum Subarray",
    description: "Given an integer array nums, find the contiguous subarray which has the largest sum and return its sum.",
    topic: "Array",
    difficulty: Difficulty.MEDIUM,
    leetcodeUrl: "https://leetcode.com/problems/maximum-subarray/",
    platform: "LeetCode",
    tags: ["Array", "Divide and Conquer", "Dynamic Programming"],
    companies: ["Amazon", "Microsoft", "Apple", "LinkedIn"],
    frequency: 9,
    timeComplexity: "O(n)",
    spaceComplexity: "O(1)",
    approach: "Kadane's algorithm - keep track of maximum sum ending at current position",
    isImported: false
  },
  {
    title: "3Sum",
    description: "Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.",
    topic: "Array",
    difficulty: Difficulty.MEDIUM,
    leetcodeUrl: "https://leetcode.com/problems/3sum/",
    platform: "LeetCode",
    tags: ["Array", "Two Pointers", "Sorting"],
    companies: ["Amazon", "Microsoft", "Facebook", "Adobe"],
    frequency: 8,
    timeComplexity: "O(nÂ²)",
    spaceComplexity: "O(1)",
    approach: "Sort array, then use two pointers for each element to find triplets",
    isImported: false
  },
  {
    title: "Container With Most Water",
    description: "You are given an integer array height of length n. Find two lines that together with the x-axis form a container that can contain the most water.",
    topic: "Array",
    difficulty: Difficulty.MEDIUM,
    leetcodeUrl: "https://leetcode.com/problems/container-with-most-water/",
    platform: "LeetCode",
    tags: ["Array", "Two Pointers", "Greedy"],
    companies: ["Amazon", "Microsoft", "Facebook"],
    frequency: 7,
    timeComplexity: "O(n)",
    spaceComplexity: "O(1)",
    approach: "Use two pointers from both ends, move the pointer with smaller height",
    isImported: false
  },
  {
    title: "Search in Rotated Sorted Array",
    description: "Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.",
    topic: "Array",
    difficulty: Difficulty.MEDIUM,
    leetcodeUrl: "https://leetcode.com/problems/search-in-rotated-sorted-array/",
    platform: "LeetCode",
    tags: ["Array", "Binary Search"],
    companies: ["Amazon", "Microsoft", "Facebook", "LinkedIn"],
    frequency: 8,
    timeComplexity: "O(log n)",
    spaceComplexity: "O(1)",
    approach: "Modified binary search considering rotation point",
    isImported: false
  },
  {
    title: "Find Minimum in Rotated Sorted Array",
    description: "Suppose an array of length n sorted in ascending order is rotated between 1 and n times. Find the minimum element.",
    topic: "Array",
    difficulty: Difficulty.MEDIUM,
    leetcodeUrl: "https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/",
    platform: "LeetCode",
    tags: ["Array", "Binary Search"],
    companies: ["Amazon", "Microsoft", "Facebook"],
    frequency: 7,
    timeComplexity: "O(log n)",
    spaceComplexity: "O(1)",
    approach: "Binary search comparing with rightmost element",
    isImported: false
  },
  {
    title: "Two Sum II - Input Array Is Sorted",
    description: "Given a 1-indexed array of integers numbers that is already sorted in non-decreasing order, find two numbers such that they add up to a specific target number.",
    topic: "Array",
    difficulty: Difficulty.MEDIUM,
    leetcodeUrl: "https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/",
    platform: "LeetCode",
    tags: ["Array", "Two Pointers", "Binary Search"],
    companies: ["Amazon", "Microsoft", "Adobe"],
    frequency: 6,
    timeComplexity: "O(n)",
    spaceComplexity: "O(1)",
    approach: "Two pointers from both ends of sorted array",
    isImported: false
  },
  {
    title: "Merge Intervals",
    description: "Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals.",
    topic: "Array",
    difficulty: Difficulty.MEDIUM,
    leetcodeUrl: "https://leetcode.com/problems/merge-intervals/",
    platform: "LeetCode",
    tags: ["Array", "Sorting"],
    companies: ["Amazon", "Microsoft", "Facebook", "Google"],
    frequency: 8,
    timeComplexity: "O(n log n)",
    spaceComplexity: "O(1)",
    approach: "Sort by start time, then merge overlapping intervals",
    isImported: false
  },
  {
    title: "Rotate Array",
    description: "Given an array, rotate the array to the right by k steps, where k is non-negative.",
    topic: "Array",
    difficulty: Difficulty.MEDIUM,
    leetcodeUrl: "https://leetcode.com/problems/rotate-array/",
    platform: "LeetCode",
    tags: ["Array", "Math", "Two Pointers"],
    companies: ["Amazon", "Microsoft", "Apple"],
    frequency: 6,
    timeComplexity: "O(n)",
    spaceComplexity: "O(1)",
    approach: "Reverse entire array, then reverse first k and last n-k elements",
    isImported: false
  },
  {
    title: "Sort Colors",
    description: "Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent.",
    topic: "Array",
    difficulty: Difficulty.MEDIUM,
    leetcodeUrl: "https://leetcode.com/problems/sort-colors/",
    platform: "LeetCode",
    tags: ["Array", "Two Pointers", "Sorting"],
    companies: ["Amazon", "Microsoft", "Facebook"],
    frequency: 7,
    timeComplexity: "O(n)",
    spaceComplexity: "O(1)",
    approach: "Dutch National Flag algorithm with three pointers",
    isImported: false
  },
  {
    title: "Maximum Product Subarray",
    description: "Given an integer array nums, find a contiguous non-empty subarray within the array that has the largest product, and return the product.",
    topic: "Array",
    difficulty: Difficulty.MEDIUM,
    leetcodeUrl: "https://leetcode.com/problems/maximum-product-subarray/",
    platform: "LeetCode",
    tags: ["Array", "Dynamic Programming"],
    companies: ["Amazon", "Microsoft", "LinkedIn"],
    frequency: 7,
    timeComplexity: "O(n)",
    spaceComplexity: "O(1)",
    approach: "Track both maximum and minimum products ending at current position",
    isImported: false
  },
  {
    title: "Trapping Rain Water",
    description: "Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.",
    topic: "Array",
    difficulty: Difficulty.HARD,
    leetcodeUrl: "https://leetcode.com/problems/trapping-rain-water/",
    platform: "LeetCode",
    tags: ["Array", "Two Pointers", "Dynamic Programming", "Stack"],
    companies: ["Amazon", "Microsoft", "Facebook", "Google"],
    frequency: 8,
    timeComplexity: "O(n)",
    spaceComplexity: "O(1)",
    approach: "Two pointers approach tracking max heights from both sides",
    isImported: false
  },

  // LINKED LISTS (12 questions)
  {
    title: "Reverse Linked List",
    description: "Given the head of a singly linked list, reverse the list, and return the reversed list.",
    topic: "Linked List",
    difficulty: Difficulty.EASY,
    leetcodeUrl: "https://leetcode.com/problems/reverse-linked-list/",
    platform: "LeetCode",
    tags: ["Linked List", "Recursion"],
    companies: ["Amazon", "Microsoft", "Apple", "Facebook"],
    frequency: 9,
    timeComplexity: "O(n)",
    spaceComplexity: "O(1)",
    approach: "Iteratively reverse the pointers between nodes",
    isImported: false
  },
  {
    title: "Merge Two Sorted Lists",
    description: "You are given the heads of two sorted linked lists list1 and list2. Merge the two lists in a one sorted list.",
    topic: "Linked List",
    difficulty: Difficulty.EASY,
    leetcodeUrl: "https://leetcode.com/problems/merge-two-sorted-lists/",
    platform: "LeetCode",
    tags: ["Linked List", "Recursion"],
    companies: ["Amazon", "Microsoft", "Apple", "Adobe"],
    frequency: 8,
    timeComplexity: "O(n + m)",
    spaceComplexity: "O(1)",
    approach: "Use two pointers to merge lists while maintaining sorted order",
    isImported: false
  },
  {
    title: "Linked List Cycle",
    description: "Given head, the head of a linked list, determine if the linked list has a cycle in it.",
    topic: "Linked List",
    difficulty: Difficulty.EASY,
    leetcodeUrl: "https://leetcode.com/problems/linked-list-cycle/",
    platform: "LeetCode",
    tags: ["Hash Table", "Linked List", "Two Pointers"],
    companies: ["Amazon", "Microsoft", "Facebook"],
    frequency: 8,
    timeComplexity: "O(n)",
    spaceComplexity: "O(1)",
    approach: "Floyd's cycle detection algorithm (slow and fast pointers)",
    isImported: false
  },
  {
    title: "Remove Nth Node From End of List",
    description: "Given the head of a linked list, remove the nth node from the end of the list and return its head.",
    topic: "Linked List",
    difficulty: Difficulty.MEDIUM,
    leetcodeUrl: "https://leetcode.com/problems/remove-nth-node-from-end-of-list/",
    platform: "LeetCode",
    tags: ["Linked List", "Two Pointers"],
    companies: ["Amazon", "Microsoft", "Facebook"],
    frequency: 7,
    timeComplexity: "O(n)",
    spaceComplexity: "O(1)",
    approach: "Two pointers with n gap between them",
    isImported: false
  },
  {
    title: "Add Two Numbers",
    description: "You are given two non-empty linked lists representing two non-negative integers. Add the two numbers and return the sum as a linked list.",
    topic: "Linked List",
    difficulty: Difficulty.MEDIUM,
    leetcodeUrl: "https://leetcode.com/problems/add-two-numbers/",
    platform: "LeetCode",
    tags: ["Linked List", "Math", "Recursion"],
    companies: ["Amazon", "Microsoft", "Facebook", "Adobe"],
    frequency: 9,
    timeComplexity: "O(max(m,n))",
    spaceComplexity: "O(max(m,n))",
    approach: "Simulate addition with carry, create new nodes for result",
    isImported: false
  },
  {
    title: "Intersection of Two Linked Lists",
    description: "Given the heads of two singly linked-lists headA and headB, return the node at which the two lists intersect.",
    topic: "Linked List",
    difficulty: Difficulty.EASY,
    leetcodeUrl: "https://leetcode.com/problems/intersection-of-two-linked-lists/",
    platform: "LeetCode",
    tags: ["Hash Table", "Linked List", "Two Pointers"],
    companies: ["Amazon", "Microsoft", "Adobe"],
    frequency: 6,
    timeComplexity: "O(m + n)",
    spaceComplexity: "O(1)",
    approach: "Two pointers switching between lists to find intersection",
    isImported: false
  },
  {
    title: "Palindrome Linked List",
    description: "Given the head of a singly linked list, return true if it is a palindrome.",
    topic: "Linked List",
    difficulty: Difficulty.EASY,
    leetcodeUrl: "https://leetcode.com/problems/palindrome-linked-list/",
    platform: "LeetCode",
    tags: ["Linked List", "Two Pointers", "Stack", "Recursion"],
    companies: ["Amazon", "Microsoft", "Facebook"],
    frequency: 6,
    timeComplexity: "O(n)",
    spaceComplexity: "O(1)",
    approach: "Find middle, reverse second half, compare both halves",
    isImported: false
  },
  {
    title: "Linked List Cycle II",
    description: "Given the head of a linked list, return the node where the cycle begins. If there is no cycle, return null.",
    topic: "Linked List",
    difficulty: Difficulty.MEDIUM,
    leetcodeUrl: "https://leetcode.com/problems/linked-list-cycle-ii/",
    platform: "LeetCode",
    tags: ["Hash Table", "Linked List", "Two Pointers"],
    companies: ["Amazon", "Microsoft", "Facebook"],
    frequency: 7,
    timeComplexity: "O(n)",
    spaceComplexity: "O(1)",
    approach: "Floyd's algorithm to detect cycle, then find start of cycle",
    isImported: false
  },
  {
    title: "Reorder List",
    description: "You are given the head of a singly linked-list. Reorder the list to be on the following form: L0 â Ln â L1 â Ln-1 â L2 â Ln-2 â â¦",
    topic: "Linked List",
    difficulty: Difficulty.MEDIUM,
    leetcodeUrl: "https://leetcode.com/problems/reorder-list/",
    platform: "LeetCode",
    tags: ["Linked List", "Two Pointers", "Stack", "Recursion"],
    companies: ["Amazon", "Microsoft", "Facebook"],
    frequency: 6,
    timeComplexity: "O(n)",
    spaceComplexity: "O(1)",
    approach: "Find middle, reverse second half, merge alternately",
    isImported: false
  },
  {
    title: "Merge k Sorted Lists",
    description: "You are given an array of k linked-lists lists, each linked-list is sorted in ascending order. Merge all the linked-lists into one sorted linked-list.",
    topic: "Linked List",
    difficulty: Difficulty.HARD,
    leetcodeUrl: "https://leetcode.com/problems/merge-k-sorted-lists/",
    platform: "LeetCode",
    tags: ["Linked List", "Divide and Conquer", "Heap", "Merge Sort"],
    companies: ["Amazon", "Microsoft", "Facebook", "Google"],
    frequency: 8,
    timeComplexity: "O(n log k)",
    spaceComplexity: "O(1)",
    approach: "Divide and conquer approach, merge pairs of lists",
    isImported: false
  },
  {
    title: "Sort List",
    description: "Given the head of a linked list, return the list after sorting it in ascending order.",
    topic: "Linked List",
    difficulty: Difficulty.MEDIUM,
    leetcodeUrl: "https://leetcode.com/problems/sort-list/",
    platform: "LeetCode",
    tags: ["Linked List", "Two Pointers", "Divide and Conquer", "Sorting", "Merge Sort"],
    companies: ["Amazon", "Microsoft", "Facebook"],
    frequency: 6,
    timeComplexity: "O(n log n)",
    spaceComplexity: "O(log n)",
    approach: "Merge sort on linked list using divide and conquer",
    isImported: false
  },
  {
    title: "Copy List with Random Pointer",
    description: "Construct a deep copy of a linked list where each node contains an additional random pointer.",
    topic: "Linked List",
    difficulty: Difficulty.MEDIUM,
    leetcodeUrl: "https://leetcode.com/problems/copy-list-with-random-pointer/",
    platform: "LeetCode",
    tags: ["Hash Table", "Linked List"],
    companies: ["Amazon", "Microsoft", "Facebook"],
    frequency: 6,
    timeComplexity: "O(n)",
    spaceComplexity: "O(1)",
    approach: "Interweave original and copied nodes, then separate",
    isImported: false
  },

  // BINARY TREES (15 questions)
  {
    title: "Binary Tree Inorder Traversal",
    description: "Given the root of a binary tree, return the inorder traversal of its nodes' values.",
    topic: "Binary Tree",
    difficulty: Difficulty.EASY,
    leetcodeUrl: "https://leetcode.com/problems/binary-tree-inorder-traversal/",
    platform: "LeetCode",
    tags: ["Stack", "Tree", "Depth-First Search", "Binary Tree"],
    companies: ["Microsoft", "Amazon", "Adobe"],
    frequency: 7,
    timeComplexity: "O(n)",
    spaceComplexity: "O(n)",
    approach: "Use recursion or iterative approach with stack",
    isImported: false
  },
  {
    title: "Maximum Depth of Binary Tree",
    description: "Given the root of a binary tree, return its maximum depth.",
    topic: "Binary Tree",
    difficulty: Difficulty.EASY,
    leetcodeUrl: "https://leetcode.com/problems/maximum-depth-of-binary-tree/",
    platform: "LeetCode",
    tags: ["Tree", "Depth-First Search", "Breadth-First Search", "Binary Tree"],
    companies: ["Amazon", "Microsoft", "LinkedIn"],
    frequency: 8,
    timeComplexity: "O(n)",
    spaceComplexity: "O(n)",
    approach: "Recursive DFS or iterative BFS",
    isImported: false
  },
  {
    title: "Same Tree",
    description: "Given the roots of two binary trees p and q, write a function to check if they are the same or not.",
    topic: "Binary Tree",
    difficulty: Difficulty.EASY,
    leetcodeUrl: "https://leetcode.com/problems/same-tree/",
    platform: "LeetCode",
    tags: ["Tree", "Depth-First Search", "Binary Tree"],
    companies: ["Amazon", "Microsoft", "Bloomberg"],
    frequency: 6,
    timeComplexity: "O(n)",
    spaceComplexity: "O(n)",
    approach: "Recursive comparison of nodes and subtrees",
    isImported: false
  },
  {
    title: "Invert Binary Tree",
    description: "Given the root of a binary tree, invert the tree, and return its root.",
    topic: "Binary Tree",
    difficulty: Difficulty.EASY,
    leetcodeUrl: "https://leetcode.com/problems/invert-binary-tree/",
    platform: "LeetCode",
    tags: ["Tree", "Depth-First Search", "Breadth-First Search", "Binary Tree"],
    companies: ["Amazon", "Microsoft", "Google"],
    frequency: 7,
    timeComplexity: "O(n)",
    spaceComplexity: "O(n)",
    approach: "Recursively swap left and right children",
    isImported: false
  },
  {
    title: "Binary Tree Level Order Traversal",
    description: "Given the root of a binary tree, return the level order traversal of its nodes' values.",
    topic: "Binary Tree",
    difficulty: Difficulty.MEDIUM,
    leetcodeUrl: "https://leetcode.com/problems/binary-tree-level-order-traversal/",
    platform: "LeetCode",
    tags: ["Tree", "Breadth-First Search", "Binary Tree"],
    companies: ["Amazon", "Microsoft", "Facebook", "LinkedIn"],
    frequency: 8,
    timeComplexity: "O(n)",
    spaceComplexity: "O(n)",
    approach: "BFS using queue to traverse level by level",
    isImported: false
  },
  {
    title: "Validate Binary Search Tree",
    description: "Given the root of a binary tree, determine if it is a valid binary search tree (BST).",
    topic: "Binary Tree",
    difficulty: Difficulty.MEDIUM,
    leetcodeUrl: "https://leetcode.com/problems/validate-binary-search-tree/",
    platform: "LeetCode",
    tags: ["Tree", "Depth-First Search", "Binary Search Tree", "Binary Tree"],
    companies: ["Amazon", "Microsoft", "Facebook", "Bloomberg"],
    frequency: 8,
    timeComplexity: "O(n)",
    spaceComplexity: "O(n)",
    approach: "Recursive validation with min/max bounds or inorder traversal",
    isImported: false
  },
  {
    title: "Symmetric Tree",
    description: "Given the root of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).",
    topic: "Binary Tree",
    difficulty: Difficulty.EASY,
    leetcodeUrl: "https://leetcode.com/problems/symmetric-tree/",
    platform: "LeetCode",
    tags: ["Tree", "Depth-First Search", "Breadth-First Search", "Binary Tree"],
    companies: ["Amazon", "Microsoft", "LinkedIn"],
    frequency: 7,
    timeComplexity: "O(n)",
    spaceComplexity: "O(n)",
    approach: "Recursive comparison of left and right subtrees",
    isImported: false
  },
  {
    title: "Path Sum",
    description: "Given the root of a binary tree and an integer targetSum, return true if the tree has a root-to-leaf path such that adding up all the values along the path equals targetSum.",
    topic: "Binary Tree",
    difficulty: Difficulty.EASY,
    leetcodeUrl: "https://leetcode.com/problems/path-sum/",
    platform: "LeetCode",
    tags: ["Tree", "Depth-First Search", "Breadth-First Search", "Binary Tree"],
    companies: ["Amazon", "Microsoft", "Facebook"],
    frequency: 6,
    timeComplexity: "O(n)",
    spaceComplexity: "O(n)",
    approach: "DFS with sum tracking from root to leaves",
    isImported: false
  },
  {
    title: "Construct Binary Tree from Preorder and Inorder Traversal",
    description: "Given two integer arrays preorder and inorder, construct and return the binary tree.",
    topic: "Binary Tree",
    difficulty: Difficulty.MEDIUM,
    leetcodeUrl: "https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/",
    platform: "LeetCode",
    tags: ["Array", "Hash Table", "Divide and Conquer", "Tree", "Binary Tree"],
    companies: ["Amazon", "Microsoft", "Facebook", "Bloomberg"],
    frequency: 7,
    timeComplexity: "O(n)",
    spaceComplexity: "O(n)",
    approach: "Recursive construction using preorder for root and inorder for subtrees",
    isImported: false
  },
  {
    title: "Binary Tree Maximum Path Sum",
    description: "A path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. Find the maximum sum of any non-empty path.",
    topic: "Binary Tree",
    difficulty: Difficulty.HARD,
    leetcodeUrl: "https://leetcode.com/problems/binary-tree-maximum-path-sum/",
    platform: "LeetCode",
    tags: ["Dynamic Programming", "Tree", "Depth-First Search", "Binary Tree"],
    companies: ["Amazon", "Microsoft", "Facebook", "Google"],
    frequency: 8,
    timeComplexity: "O(n)",
    spaceComplexity: "O(n)",
    approach: "DFS with global maximum tracking, consider paths through each node",
    isImported: false
  },
  {
    title: "Lowest Common Ancestor of a Binary Tree",
    description: "Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.",
    topic: "Binary Tree",
    difficulty: Difficulty.MEDIUM,
    leetcodeUrl: "https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree/",
    platform: "LeetCode",
    tags: ["Tree", "Depth-First Search", "Binary Tree"],
    companies: ["Amazon", "Microsoft", "Facebook", "LinkedIn"],
    frequency: 7,
    timeComplexity: "O(n)",
    spaceComplexity: "O(n)",
    approach: "DFS to find nodes, LCA is where paths diverge",
    isImported: false
  },
  {
    title: "Binary Tree Right Side View",
    description: "Given the root of a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.",
    topic: "Binary Tree",
    difficulty: Difficulty.MEDIUM,
    leetcodeUrl: "https://leetcode.com/problems/binary-tree-right-side-view/",
    platform: "LeetCode",
    tags: ["Tree", "Depth-First Search", "Breadth-First Search", "Binary Tree"],
    companies: ["Amazon", "Microsoft", "Facebook"],
    frequency: 6,
    timeComplexity: "O(n)",
    spaceComplexity: "O(n)",
    approach: "Level order traversal, take rightmost node of each level",
    isImported: false
  },
  {
    title: "Serialize and Deserialize Binary Tree",
    description: "Design an algorithm to serialize and deserialize a binary tree.",
    topic: "Binary Tree",
    difficulty: Difficulty.HARD,
    leetcodeUrl: "https://leetcode.com/problems/serialize-and-deserialize-binary-tree/",
    platform: "LeetCode",
    tags: ["String", "Tree", "Depth-First Search", "Breadth-First Search", "Design", "Binary Tree"],
    companies: ["Amazon", "Microsoft", "Facebook", "LinkedIn"],
    frequency: 7,
    timeComplexity: "O(n)",
    spaceComplexity: "O(n)",
    approach: "Preorder traversal for serialization, recursive deserialization",
    isImported: false
  },
  {
    title: "Count Good Nodes in Binary Tree",
    description: "Given a binary tree root, a node X in the tree is named good if in the path from root to X there are no nodes with a value greater than X.",
    topic: "Binary Tree",
    difficulty: Difficulty.MEDIUM,
    leetcodeUrl: "https://leetcode.com/problems/count-good-nodes-in-binary-tree/",
    platform: "LeetCode",
    tags: ["Tree", "Depth-First Search", "Binary Tree"],
    companies: ["Amazon", "Microsoft", "Facebook"],
    frequency: 6,
    timeComplexity: "O(n)",
    spaceComplexity: "O(n)",
    approach: "DFS with maximum value tracking from root to current node",
    isImported: false
  },
  {
    title: "Diameter of Binary Tree",
    description: "Given the root of a binary tree, return the length of the diameter of the tree.",
    topic: "Binary Tree",
    difficulty: Difficulty.EASY,
    leetcodeUrl: "https://leetcode.com/problems/diameter-of-binary-tree/",
    platform: "LeetCode",
    tags: ["Tree", "Depth-First Search", "Binary Tree"],
    companies: ["Amazon", "Microsoft", "Facebook", "Google"],
    frequency: 7,
    timeComplexity: "O(n)",
    spaceComplexity: "O(n)",
    approach: "DFS to calculate height, track maximum diameter through each node",
    isImported: false
  },

  // STRINGS (12 questions)
  {
    title: "Valid Anagram",
    description: "Given two strings s and t, return true if t is an anagram of s, and false otherwise.",
    topic: "String",
    difficulty: Difficulty.EASY,
    leetcodeUrl: "https://leetcode.com/problems/valid-anagram/",
    platform: "LeetCode",
    tags: ["Hash Table", "String", "Sorting"],
    companies: ["Amazon", "Microsoft", "Facebook"],
    frequency: 7,
    timeComplexity: "O(n)",
    spaceComplexity: "O(1)",
    approach: "Count character frequencies or sort both strings",
    isImported: false
  },
  {
    title: "Valid Palindrome",
    description: "A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward.",
    topic: "String",
    difficulty: Difficulty.EASY,
    leetcodeUrl: "https://leetcode.com/problems/valid-palindrome/",
    platform: "LeetCode",
    tags: ["Two Pointers", "String"],
    companies: ["Amazon", "Microsoft", "Facebook"],
    frequency: 6,
    timeComplexity: "O(n)",
    spaceComplexity: "O(1)",
    approach: "Two pointers from both ends, skip non-alphanumeric characters",
    isImported: false
  },
  {
    title: "Longest Substring Without Repeating Characters",
    description: "Given a string s, find the length of the longest substring without repeating characters.",
    topic: "String",
    difficulty: Difficulty.MEDIUM,
    leetcodeUrl: "https://leetcode.com/problems/longest-substring-without-repeating-characters/",
    platform: "LeetCode",
    tags: ["Hash Table", "String", "Sliding Window"],
    companies: ["Amazon", "Microsoft", "Adobe", "Bloomberg"],
    frequency: 9,
    timeComplexity: "O(n)",
    spaceComplexity: "O(min(m,n))",
    approach: "Use sliding window with hash map to track character positions",
    isImported: false
  },
  {
    title: "Group Anagrams",
    description: "Given an array of strings strs, group the anagrams together. You can return the answer in any order.",
    topic: "String",
    difficulty: Difficulty.MEDIUM,
    leetcodeUrl: "https://leetcode.com/problems/group-anagrams/",
    platform: "LeetCode",
    tags: ["Array", "Hash Table", "String", "Sorting"],
    companies: ["Amazon", "Microsoft", "Uber", "Facebook"],
    frequency: 7,
    timeComplexity: "O(n * k log k)",
    spaceComplexity: "O(n * k)",
    approach: "Use sorted string as key to group anagrams in hash map",
    isImported: false
  },
  {
    title: "Longest Palindromic Substring",
    description: "Given a string s, return the longest palindromic substring in s.",
    topic: "String",
    difficulty: Difficulty.MEDIUM,
    leetcodeUrl: "https://leetcode.com/problems/longest-palindromic-substring/",
    platform: "LeetCode",
    tags: ["String", "Dynamic Programming"],
    companies: ["Amazon", "Microsoft", "Facebook", "Adobe"],
    frequency: 8,
    timeComplexity: "O(nÂ²)",
    spaceComplexity: "O(1)",
    approach: "Expand around centers for all possible palindrome centers",
    isImported: false
  },
  {
    title: "Valid Parentheses",
    description: "Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.",
    topic: "String",
    difficulty: Difficulty.EASY,
    leetcodeUrl: "https://leetcode.com/problems/valid-parentheses/",
    platform: "LeetCode",
    tags: ["String", "Stack"],
    companies: ["Amazon", "Microsoft", "Google", "Bloomberg"],
    frequency: 8,
    timeComplexity: "O(n)",
    spaceComplexity: "O(n)",
    approach: "Use a stack to match opening and closing brackets",
    isImported: false
  },
  {
    title: "Minimum Window Substring",
    description: "Given two strings s and t of lengths m and n respectively, return the minimum window substring of s such that every character in t is included in the window.",
    topic: "String",
    difficulty: Difficulty.HARD,
    leetcodeUrl: "https://leetcode.com/problems/minimum-window-substring/",
    platform: "LeetCode",
    tags: ["Hash Table", "String", "Sliding Window"],
    companies: ["Amazon", "Microsoft", "Facebook", "Uber"],
    frequency: 8,
    timeComplexity: "O(m + n)",
    spaceComplexity: "O(m + n)",
    approach: "Sliding window with character frequency tracking",
    isImported: false
  },
  {
    title: "Palindromic Substrings",
    description: "Given a string s, return the number of palindromic substrings in it.",
    topic: "String",
    difficulty: Difficulty.MEDIUM,
    leetcodeUrl: "https://leetcode.com/problems/palindromic-substrings/",
    platform: "LeetCode",
    tags: ["String", "Dynamic Programming"],
    companies: ["Amazon", "Microsoft", "Facebook"],
    frequency: 6,
    timeComplexity: "O(nÂ²)",
    spaceComplexity: "O(1)",
    approach: "Expand around centers, count all palindromes",
    isImported: false
  },
  {
    title: "Longest Repeating Character Replacement",
    description: "You are given a string s and an integer k. You can choose any character of the string and change it to any other uppercase English character. Return the length of the longest substring containing the same letter you can get after performing the above operations.",
    topic: "String",
    difficulty: Difficulty.MEDIUM,
    leetcodeUrl: "https://leetcode.com/problems/longest-repeating-character-replacement/",
    platform: "LeetCode",
    tags: ["Hash Table", "String", "Sliding Window"],
    companies: ["Amazon", "Microsoft", "Facebook"],
    frequency: 6,
    timeComplexity: "O(n)",
    spaceComplexity: "O(1)",
    approach: "Sliding window with character frequency tracking",
    isImported: false
  },
  {
    title: "String to Integer (atoi)",
    description: "Implement the myAtoi(string s) function, which converts a string to a 32-bit signed integer.",
    topic: "String",
    difficulty: Difficulty.MEDIUM,
    leetcodeUrl: "https://leetcode.com/problems/string-to-integer-atoi/",
    platform: "LeetCode",
    tags: ["String"],
    companies: ["Amazon", "Microsoft", "Facebook", "Bloomberg"],
    frequency: 7,
    timeComplexity: "O(n)",
    spaceComplexity: "O(1)",
    approach: "Parse string character by character with overflow handling",
    isImported: false
  },
  {
    title: "Letter Combinations of a Phone Number",
    description: "Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent.",
    topic: "String",
    difficulty: Difficulty.MEDIUM,
    leetcodeUrl: "https://leetcode.com/problems/letter-combinations-of-a-phone-number/",
    platform: "LeetCode",
    tags: ["Hash Table", "String", "Backtracking"],
    companies: ["Amazon", "Microsoft", "Facebook", "Google"],
    frequency: 7,
    timeComplexity: "O(3^n * 4^m)",
    spaceComplexity: "O(3^n * 4^m)",
    approach: "Backtracking to generate all combinations",
    isImported: false
  },
  {
    title: "Generate Parentheses",
    description: "Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.",
    topic: "String",
    difficulty: Difficulty.MEDIUM,
    leetcodeUrl: "https://leetcode.com/problems/generate-parentheses/",
    platform: "LeetCode",
    tags: ["String", "Dynamic Programming", "Backtracking"],
    companies: ["Amazon", "Microsoft", "Facebook", "Google"],
    frequency: 7,
    timeComplexity: "O(4^n / ân)",
    spaceComplexity: "O(4^n / ân)",
    approach: "Backtracking with open/close parentheses count tracking",
    isImported: false
  },

  // STACKS (10 questions)
  {
    title: "Valid Parentheses",
    description: "Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.",
    topic: "Stack",
    difficulty: Difficulty.EASY,
    leetcodeUrl: "https://leetcode.com/problems/valid-parentheses/",
    platform: "LeetCode",
    tags: ["String", "Stack"],
    companies: ["Amazon", "Microsoft", "Google", "Bloomberg"],
    frequency: 8,
    timeComplexity: "O(n)",
    spaceComplexity: "O(n)",
    approach: "Use a stack to match opening and closing brackets",
    isImported: false
  },
  {
    title: "Min Stack",
    description: "Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.",
    topic: "Stack",
    difficulty: Difficulty.MEDIUM,
    leetcodeUrl: "https://leetcode.com/problems/min-stack/",
    platform: "LeetCode",
    tags: ["Stack", "Design"],
    companies: ["Amazon", "Microsoft", "Facebook", "Google"],
    frequency: 7,
    timeComplexity: "O(1)",
    spaceComplexity: "O(n)",
    approach: "Use auxiliary stack to track minimum values",
    isImported: false
  },
  {
    title: "Evaluate Reverse Polish Notation",
    description: "Evaluate the value of an arithmetic expression in Reverse Polish Notation.",
    topic: "Stack",
    difficulty: Difficulty.MEDIUM,
    leetcodeUrl: "https://leetcode.com/problems/evaluate-reverse-polish-notation/",
    platform: "LeetCode",
    tags: ["Array", "Math", "Stack"],
    companies: ["Amazon", "Microsoft", "LinkedIn"],
    frequency: 6,
    timeComplexity: "O(n)",
    spaceComplexity: "O(n)",
    approach: "Use stack to process operators and operands",
    isImported: false
  },
  {
    title: "Daily Temperatures",
    description: "Given an array of integers temperatures represents the daily temperatures, return an array answer such that answer[i] is the number of days you have to wait after the ith day to get a warmer temperature.",
    topic: "Stack",
    difficulty: Difficulty.MEDIUM,
    leetcodeUrl: "https://leetcode.com/problems/daily-temperatures/",
    platform: "LeetCode",
    tags: ["Array", "Stack", "Monotonic Stack"],
    companies: ["Amazon", "Microsoft", "Facebook"],
    frequency: 7,
    timeComplexity: "O(n)",
    spaceComplexity: "O(n)",
    approach: "Monotonic decreasing stack to find next greater element",
    isImported: false
  },
  {
    title: "Next Greater Element I",
    description: "The next greater element of some element x in an array is the first greater element that is to the right of x in the same array.",
    topic: "Stack",
    difficulty: Difficulty.EASY,
    leetcodeUrl: "https://leetcode.com/problems/next-greater-element-i/",
    platform: "LeetCode",
    tags: ["Array", "Hash Table", "Stack", "Monotonic Stack"],
    companies: ["Amazon", "Microsoft", "Google"],
    frequency: 6,
    timeComplexity: "O(n)",
    spaceComplexity: "O(n)",
    approach: "Stack with hash map to find next greater elements",
    isImported: false
  },
  {
    title: "Largest Rectangle in Histogram",
    description: "Given an array of integers heights representing the histogram's bar height where the width of each bar is 1, return the area of the largest rectangle in the histogram.",
    topic: "Stack",
    difficulty: Difficulty.HARD,
    leetcodeUrl: "https://leetcode.com/problems/largest-rectangle-in-histogram/",
    platform: "LeetCode",
    tags: ["Array", "Stack", "Monotonic Stack"],
    companies: ["Amazon", "Microsoft", "Facebook", "Google"],
    frequency: 7,
    timeComplexity: "O(n)",
    spaceComplexity: "O(n)",
    approach: "Monotonic increasing stack to find boundaries",
    isImported: false
  },
  {
    title: "Basic Calculator",
    description: "Given a string s representing a valid expression, implement a basic calculator to evaluate it.",
    topic: "Stack",
    difficulty: Difficulty.HARD,
    leetcodeUrl: "https://leetcode.com/problems/basic-calculator/",
    platform: "LeetCode",
    tags: ["Math", "String", "Stack", "Recursion"],
    companies: ["Amazon", "Microsoft", "Facebook", "Google"],
    frequency: 6,
    timeComplexity: "O(n)",
    spaceComplexity: "O(n)",
    approach: "Stack to handle parentheses and operators",
    isImported: false
  },
  {
    title: "Remove K Digits",
    description: "Given string num representing a non-negative integer num, and an integer k, return the smallest possible integer after removing k digits from num.",
    topic: "Stack",
    difficulty: Difficulty.MEDIUM,
    leetcodeUrl: "https://leetcode.com/problems/remove-k-digits/",
    platform: "LeetCode",
    tags: ["String", "Stack", "Greedy", "Monotonic Stack"],
    companies: ["Amazon", "Microsoft", "Facebook"],
    frequency: 6,
    timeComplexity: "O(n)",
    spaceComplexity: "O(n)",
    approach: "Monotonic increasing stack to maintain smallest digits",
    isImported: false
  },
  {
    title: "Simplify Path",
    description: "Given a string path, which is an absolute path (starting with a slash '/') to a file or directory in a Unix-style file system, convert it to the simplified canonical path.",
    topic: "Stack",
    difficulty: Difficulty.MEDIUM,
    leetcodeUrl: "https://leetcode.com/problems/simplify-path/",
    platform: "LeetCode",
    tags: ["String", "Stack"],
    companies: ["Amazon", "Microsoft", "Facebook"],
    frequency: 5,
    timeComplexity: "O(n)",
    spaceComplexity: "O(n)",
    approach: "Stack to process path components",
    isImported: false
  },
  {
    title: "Decode String",
    description: "Given an encoded string, return its decoded string. The encoding rule is: k[encoded_string], where the encoded_string inside the square brackets is being repeated exactly k times.",
    topic: "Stack",
    difficulty: Difficulty.MEDIUM,
    leetcodeUrl: "https://leetcode.com/problems/decode-string/",
    platform: "LeetCode",
    tags: ["String", "Stack", "Recursion"],
    companies: ["Amazon", "Microsoft", "Facebook", "Google"],
    frequency: 7,
    timeComplexity: "O(n)",
    spaceComplexity: "O(n)",
    approach: "Stack to handle nested brackets and multipliers",
    isImported: false
  },

  // DYNAMIC PROGRAMMING (12 questions)
  {
    title: "Climbing Stairs",
    description: "You are climbing a staircase. It takes n steps to reach the top. Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?",
    topic: "Dynamic Programming",
    difficulty: Difficulty.EASY,
    leetcodeUrl: "https://leetcode.com/problems/climbing-stairs/",
    platform: "LeetCode",
    tags: ["Math", "Dynamic Programming", "Memoization"],
    companies: ["Amazon", "Adobe", "Apple"],
    frequency: 8,
    timeComplexity: "O(n)",
    spaceComplexity: "O(1)",
    approach: "Dynamic programming - each step can be reached from previous 1 or 2 steps",
    isImported: false
  },
  {
    title: "House Robber",
    description: "You are a professional robber planning to rob houses along a street. You cannot rob two adjacent houses. Determine the maximum amount of money you can rob.",
    topic: "Dynamic Programming",
    difficulty: Difficulty.MEDIUM,
    leetcodeUrl: "https://leetcode.com/problems/house-robber/",
    platform: "LeetCode",
    tags: ["Array", "Dynamic Programming"],
    companies: ["Amazon", "Microsoft", "LinkedIn"],
    frequency: 7,
    timeComplexity: "O(n)",
    spaceComplexity: "O(1)",
    approach: "DP tracking max money with/without robbing current house",
    isImported: false
  },
  {
    title: "Coin Change",
    description: "You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money. Return the fewest number of coins that you need to make up that amount.",
    topic: "Dynamic Programming",
    difficulty: Difficulty.MEDIUM,
    leetcodeUrl: "https://leetcode.com/problems/coin-change/",
    platform: "LeetCode",
    tags: ["Array", "Dynamic Programming", "Breadth-First Search"],
    companies: ["Amazon", "Microsoft", "Facebook", "Google"],
    frequency: 8,
    timeComplexity: "O(amount * coins)",
    spaceComplexity: "O(amount)",
    approach: "DP building up minimum coins needed for each amount",
    isImported: false
  },
  {
    title: "Longest Increasing Subsequence",
    description: "Given an integer array nums, return the length of the longest strictly increasing subsequence.",
    topic: "Dynamic Programming",
    difficulty: Difficulty.MEDIUM,
    leetcodeUrl: "https://leetcode.com/problems/longest-increasing-subsequence/",
    platform: "LeetCode",
    tags: ["Array", "Binary Search", "Dynamic Programming"],
    companies: ["Amazon", "Microsoft", "Facebook", "Google"],
    frequency: 7,
    timeComplexity: "O(n log n)",
    spaceComplexity: "O(n)",
    approach: "DP with binary search or patience sorting",
    isImported: false
  },
  {
    title: "Word Break",
    description: "Given a string s and a dictionary of strings wordDict, return true if s can be segmented into a space-separated sequence of one or more dictionary words.",
    topic: "Dynamic Programming",
    difficulty: Difficulty.MEDIUM,
    leetcodeUrl: "https://leetcode.com/problems/word-break/",
    platform: "LeetCode",
    tags: ["Hash Table", "String", "Dynamic Programming", "Trie", "Memoization"],
    companies: ["Amazon", "Microsoft", "Facebook", "Google"],
    frequency: 7,
    timeComplexity: "O(nÂ² + m)",
    spaceComplexity: "O(n + m)",
    approach: "DP checking if string can be broken at each position",
    isImported: false
  },
  {
    title: "Unique Paths",
    description: "There is a robot on an m x n grid. The robot can only move either down or right at any point in time. How many possible unique paths are there?",
    topic: "Dynamic Programming",
    difficulty: Difficulty.MEDIUM,
    leetcodeUrl: "https://leetcode.com/problems/unique-paths/",
    platform: "LeetCode",
    tags: ["Math", "Dynamic Programming", "Combinatorics"],
    companies: ["Amazon", "Microsoft", "Google"],
    frequency: 6,
    timeComplexity: "O(m * n)",
    spaceComplexity: "O(n)",
    approach: "DP counting paths from top-left to each cell",
    isImported: false
  },
  {
    title: "Jump Game",
    description: "You are given an integer array nums. You are initially positioned at the array's first index, and each element in the array represents your maximum jump length at that position. Return true if you can reach the last index.",
    topic: "Dynamic Programming",
    difficulty: Difficulty.MEDIUM,
    leetcodeUrl: "https://leetcode.com/problems/jump-game/",
    platform: "LeetCode",
    tags: ["Array", "Dynamic Programming", "Greedy"],
    companies: ["Amazon", "Microsoft", "Facebook"],
    frequency: 7,
    timeComplexity: "O(n)",
    spaceComplexity: "O(1)",
    approach: "Greedy tracking furthest reachable position",
    isImported: false
  },
  {
    title: "Palindromic Substrings",
    description: "Given a string s, return the number of palindromic substrings in it.",
    topic: "Dynamic Programming",
    difficulty: Difficulty.MEDIUM,
    leetcodeUrl: "https://leetcode.com/problems/palindromic-substrings/",
    platform: "LeetCode",
    tags: ["String", "Dynamic Programming"],
    companies: ["Amazon", "Microsoft", "Facebook"],
    frequency: 6,
    timeComplexity: "O(nÂ²)",
    spaceComplexity: "O(1)",
    approach: "Expand around centers or DP table",
    isImported: false
  },
  {
    title: "Edit Distance",
    description: "Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.",
    topic: "Dynamic Programming",
    difficulty: Difficulty.MEDIUM,
    leetcodeUrl: "https://leetcode.com/problems/edit-distance/",
    platform: "LeetCode",
    tags: ["String", "Dynamic Programming"],
    companies: ["Amazon", "Microsoft", "Facebook", "Google"],
    frequency: 6,
    timeComplexity: "O(m * n)",
    spaceComplexity: "O(m * n)",
    approach: "2D DP tracking minimum operations for each substring pair",
    isImported: false
  },
  {
    title: "Decode Ways",
    description: "A message containing letters from A-Z can be encoded into numbers using a specific mapping. Given a string s containing only digits, return the number of ways to decode it.",
    topic: "Dynamic Programming",
    difficulty: Difficulty.MEDIUM,
    leetcodeUrl: "https://leetcode.com/problems/decode-ways/",
    platform: "LeetCode",
    tags: ["String", "Dynamic Programming"],
    companies: ["Amazon", "Microsoft", "Facebook"],
    frequency: 6,
    timeComplexity: "O(n)",
    spaceComplexity: "O(1)",
    approach: "DP tracking ways to decode ending at each position",
    isImported: false
  },
  {
    title: "Maximum Product Subarray",
    description: "Given an integer array nums, find a contiguous non-empty subarray within the array that has the largest product, and return the product.",
    topic: "Dynamic Programming",
    difficulty: Difficulty.MEDIUM,
    leetcodeUrl: "https://leetcode.com/problems/maximum-product-subarray/",
    platform: "LeetCode",
    tags: ["Array", "Dynamic Programming"],
    companies: ["Amazon", "Microsoft", "LinkedIn"],
    frequency: 7,
    timeComplexity: "O(n)",
    spaceComplexity: "O(1)",
    approach: "Track both maximum and minimum products ending at current position",
    isImported: false
  },
  {
    title: "Partition Equal Subset Sum",
    description: "Given a non-empty array nums containing only positive integers, find if the array can be partitioned into two subsets such that the sum of elements in both subsets is equal.",
    topic: "Dynamic Programming",
    difficulty: Difficulty.MEDIUM,
    leetcodeUrl: "https://leetcode.com/problems/partition-equal-subset-sum/",
    platform: "LeetCode",
    tags: ["Array", "Dynamic Programming"],
    companies: ["Amazon", "Microsoft", "Facebook"],
    frequency: 6,
    timeComplexity: "O(n * sum)",
    spaceComplexity: "O(sum)",
    approach: "DP subset sum problem - check if sum/2 is achievable",
    isImported: false
  },

  // BINARY SEARCH (10 questions)
  {
    title: "Binary Search",
    description: "Given an array of integers nums which is sorted in ascending order, and an integer target, write a function to search target in nums.",
    topic: "Binary Search",
    difficulty: Difficulty.EASY,
    leetcodeUrl: "https://leetcode.com/problems/binary-search/",
    platform: "LeetCode",
    tags: ["Array", "Binary Search"],
    companies: ["Amazon", "Microsoft", "Google"],
    frequency: 8,
    timeComplexity: "O(log n)",
    spaceComplexity: "O(1)",
    approach: "Standard binary search with left and right pointers",
    isImported: false
  },
  {
    title: "Search in Rotated Sorted Array",
    description: "Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.",
    topic: "Binary Search",
    difficulty: Difficulty.MEDIUM,
    leetcodeUrl: "https://leetcode.com/problems/search-in-rotated-sorted-array/",
    platform: "LeetCode",
    tags: ["Array", "Binary Search"],
    companies: ["Amazon", "Microsoft", "Facebook", "LinkedIn"],
    frequency: 8,
    timeComplexity: "O(log n)",
    spaceComplexity: "O(1)",
    approach: "Modified binary search considering rotation point",
    isImported: false
  },
  {
    title: "Find Minimum in Rotated Sorted Array",
    description: "Suppose an array of length n sorted in ascending order is rotated between 1 and n times. Find the minimum element.",
    topic: "Binary Search",
    difficulty: Difficulty.MEDIUM,
    leetcodeUrl: "https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/",
    platform: "LeetCode",
    tags: ["Array", "Binary Search"],
    companies: ["Amazon", "Microsoft", "Facebook"],
    frequency: 7,
    timeComplexity: "O(log n)",
    spaceComplexity: "O(1)",
    approach: "Binary search comparing with rightmost element",
    isImported: false
  },
  {
    title: "Search a 2D Matrix",
    description: "Write an efficient algorithm that searches for a value target in an m x n integer matrix.",
    topic: "Binary Search",
    difficulty: Difficulty.MEDIUM,
    leetcodeUrl: "https://leetcode.com/problems/search-a-2d-matrix/",
    platform: "LeetCode",
    tags: ["Array", "Binary Search", "Matrix"],
    companies: ["Amazon", "Microsoft", "Facebook"],
    frequency: 6,
    timeComplexity: "O(log(m * n))",
    spaceComplexity: "O(1)",
    approach: "Binary search treating 2D matrix as 1D array",
    isImported: false
  },
  {
    title: "Find First and Last Position of Element in Sorted Array",
    description: "Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.",
    topic: "Binary Search",
    difficulty: Difficulty.MEDIUM,
    leetcodeUrl: "https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/",
    platform: "LeetCode",
    tags: ["Array", "Binary Search"],
    companies: ["Amazon", "Microsoft", "Facebook"],
    frequency: 7,
    timeComplexity: "O(log n)",
    spaceComplexity: "O(1)",
    approach: "Two binary searches for leftmost and rightmost positions",
    isImported: false
  },
  {
    title: "Search Insert Position",
    description: "Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.",
    topic: "Binary Search",
    difficulty: Difficulty.EASY,
    leetcodeUrl: "https://leetcode.com/problems/search-insert-position/",
    platform: "LeetCode",
    tags: ["Array", "Binary Search"],
    companies: ["Amazon", "Microsoft", "LinkedIn"],
    frequency: 6,
    timeComplexity: "O(log n)",
    spaceComplexity: "O(1)",
    approach: "Binary search finding insertion point",
    isImported: false
  },
  {
    title: "Sqrt(x)",
    description: "Given a non-negative integer x, compute and return the square root of x.",
    topic: "Binary Search",
    difficulty: Difficulty.EASY,
    leetcodeUrl: "https://leetcode.com/problems/sqrtx/",
    platform: "LeetCode",
    tags: ["Math", "Binary Search"],
    companies: ["Amazon", "Microsoft", "Facebook"],
    frequency: 5,
    timeComplexity: "O(log n)",
    spaceComplexity: "O(1)",
    approach: "Binary search on range [0, x] finding largest square â¤ x",
    isImported: false
  },
  {
    title: "Peak Index in a Mountain Array",
    description: "An array arr a mountain if it increases to a peak and then decreases. Find the index of the peak.",
    topic: "Binary Search",
    difficulty: Difficulty.MEDIUM,
    leetcodeUrl: "https://leetcode.com/problems/peak-index-in-a-mountain-array/",
    platform: "LeetCode",
    tags: ["Array", "Binary Search"],
    companies: ["Amazon", "Microsoft", "Google"],
    frequency: 5,
    timeComplexity: "O(log n)",
    spaceComplexity: "O(1)",
    approach: "Binary search comparing with next element",
    isImported: false
  },
  {
    title: "Find Peak Element",
    description: "A peak element is an element that is strictly greater than its neighbors. Find a peak element and return its index.",
    topic: "Binary Search",
    difficulty: Difficulty.MEDIUM,
    leetcodeUrl: "https://leetcode.com/problems/find-peak-element/",
    platform: "LeetCode",
    tags: ["Array", "Binary Search"],
    companies: ["Amazon", "Microsoft", "Facebook"],
    frequency: 6,
    timeComplexity: "O(log n)",
    spaceComplexity: "O(1)",
    approach: "Binary search following increasing slope",
    isImported: false
  },
  {
    title: "Koko Eating Bananas",
    description: "Koko loves to eat bananas. Return the minimum integer k such that she can eat all the bananas within h hours.",
    topic: "Binary Search",
    difficulty: Difficulty.MEDIUM,
    leetcodeUrl: "https://leetcode.com/problems/koko-eating-bananas/",
    platform: "LeetCode",
    tags: ["Array", "Binary Search"],
    companies: ["Amazon", "Microsoft", "Facebook"],
    frequency: 6,
    timeComplexity: "O(n log max(piles))",
    spaceComplexity: "O(1)",
    approach: "Binary search on eating speed, simulate eating time",
    isImported: false
  },

  // HEAPS & PRIORITY QUEUE (10 questions)
  {
    title: "Kth Largest Element in an Array",
    description: "Given an integer array nums and an integer k, return the kth largest element in the array.",
    topic: "Heap",
    difficulty: Difficulty.MEDIUM,
    leetcodeUrl: "https://leetcode.com/problems/kth-largest-element-in-an-array/",
    platform: "LeetCode",
    tags: ["Array", "Divide and Conquer", "Sorting", "Heap", "Quickselect"],
    companies: ["Amazon", "Microsoft", "Facebook", "Apple"],
    frequency: 8,
    timeComplexity: "O(n log k)",
    spaceComplexity: "O(k)",
    approach: "Min heap of size k to track k largest elements",
    isImported: false
  },
  {
    title: "Top K Frequent Elements",
    description: "Given an integer array nums and an integer k, return the k most frequent elements.",
    topic: "Heap",
    difficulty: Difficulty.MEDIUM,
    leetcodeUrl: "https://leetcode.com/problems/top-k-frequent-elements/",
    platform: "LeetCode",
    tags: ["Array", "Hash Table", "Divide and Conquer", "Sorting", "Heap", "Bucket Sort", "Counting", "Quickselect"],
    companies: ["Amazon", "Microsoft", "Facebook", "Yelp"],
    frequency: 8,
    timeComplexity: "O(n log k)",
    spaceComplexity: "O(n + k)",
    approach: "Hash map for frequency + min heap of size k",
    isImported: false
  },
  {
    title: "Merge k Sorted Lists",
    description: "You are given an array of k linked-lists lists, each linked-list is sorted in ascending order. Merge all the linked-lists into one sorted linked-list and return it.",
    topic: "Heap",
    difficulty: Difficulty.HARD,
    leetcodeUrl: "https://leetcode.com/problems/merge-k-sorted-lists/",
    platform: "LeetCode",
    tags: ["Linked List", "Divide and Conquer", "Heap", "Merge Sort"],
    companies: ["Amazon", "Microsoft", "Facebook", "Google"],
    frequency: 8,
    timeComplexity: "O(n log k)",
    spaceComplexity: "O(k)",
    approach: "Min heap to track smallest node from each list",
    isImported: false
  },
  {
    title: "Find Median from Data Stream",
    description: "The median is the middle value in an ordered integer list. Design a data structure that supports adding integers and finding the median.",
    topic: "Heap",
    difficulty: Difficulty.HARD,
    leetcodeUrl: "https://leetcode.com/problems/find-median-from-data-stream/",
    platform: "LeetCode",
    tags: ["Two Pointers", "Design", "Sorting", "Heap", "Data Stream"],
    companies: ["Amazon", "Microsoft", "Facebook", "Google"],
    frequency: 7,
    timeComplexity: "O(log n)",
    spaceComplexity: "O(n)",
    approach: "Two heaps: max heap for smaller half, min heap for larger half",
    isImported: false
  },
  {
    title: "Task Scheduler",
    description: "Given a characters array tasks, representing the tasks a CPU must do, and a positive integer n, representing the cooling time, return the least number of units of times that the CPU will take to finish all the given tasks.",
    topic: "Heap",
    difficulty: Difficulty.MEDIUM,
    leetcodeUrl: "https://leetcode.com/problems/task-scheduler/",
    platform: "LeetCode",
    tags: ["Array", "Hash Table", "Greedy", "Sorting", "Heap", "Counting"],
    companies: ["Amazon", "Microsoft", "Facebook"],
    frequency: 7,
    timeComplexity: "O(n)",
    spaceComplexity: "O(1)",
    approach: "Max heap for task frequencies with cooling period tracking",
    isImported: false
  },
  {
    title: "Ugly Number II",
    description: "An ugly number is a positive integer whose prime factors are limited to 2, 3, and 5. Given an integer n, return the nth ugly number.",
    topic: "Heap",
    difficulty: Difficulty.MEDIUM,
    leetcodeUrl: "https://leetcode.com/problems/ugly-number-ii/",
    platform: "LeetCode",
    tags: ["Hash Table", "Math", "Dynamic Programming", "Heap"],
    companies: ["Amazon", "Microsoft", "Google"],
    frequency: 5,
    timeComplexity: "O(n log n)",
    spaceComplexity: "O(n)",
    approach: "Min heap to generate ugly numbers in order",
    isImported: false
  },
  {
    title: "K Closest Points to Origin",
    description: "Given an array of points where points[i] = [xi, yi] represents a point on the X-Y plane and an integer k, return the k closest points to the origin (0, 0).",
    topic: "Heap",
    difficulty: Difficulty.MEDIUM,
    leetcodeUrl: "https://leetcode.com/problems/k-closest-points-to-origin/",
    platform: "LeetCode",
    tags: ["Array", "Math", "Divide and Conquer", "Geometry", "Sorting", "Heap", "Quickselect"],
    companies: ["Amazon", "Microsoft", "Facebook"],
    frequency: 7,
    timeComplexity: "O(n log k)",
    spaceComplexity: "O(k)",
    approach: "Max heap of size k to track k closest points",
    isImported: false
  },
  {
    title: "Sliding Window Maximum",
    description: "You are given an array of integers nums, there is a sliding window of size k which is moving from the very left of the array to the very right. Return the max sliding window.",
    topic: "Heap",
    difficulty: Difficulty.HARD,
    leetcodeUrl: "https://leetcode.com/problems/sliding-window-maximum/",
    platform: "LeetCode",
    tags: ["Array", "Queue", "Sliding Window", "Heap", "Monotonic Queue"],
    companies: ["Amazon", "Microsoft", "Facebook", "Google"],
    frequency: 7,
    timeComplexity: "O(n log k)",
    spaceComplexity: "O(k)",
    approach: "Max heap with lazy deletion or monotonic deque",
    isImported: false
  },
  {
    title: "The Skyline Problem",
    description: "Given the locations and heights of buildings, return the skyline formed by these buildings collectively.",
    topic: "Heap",
    difficulty: Difficulty.HARD,
    leetcodeUrl: "https://leetcode.com/problems/the-skyline-problem/",
    platform: "LeetCode",
    tags: ["Array", "Divide and Conquer", "Binary Indexed Tree", "Segment Tree", "Line Sweep", "Heap"],
    companies: ["Amazon", "Microsoft", "Facebook", "Google"],
    frequency: 5,
    timeComplexity: "O(n log n)",
    spaceComplexity: "O(n)",
    approach: "Event processing with max heap for active building heights",
    isImported: false
  },
  {
    title: "Meeting Rooms II",
    description: "Given an array of meeting time intervals, find the minimum number of conference rooms required.",
    topic: "Heap",
    difficulty: Difficulty.MEDIUM,
    leetcodeUrl: "https://leetcode.com/problems/meeting-rooms-ii/",
    platform: "LeetCode",
    tags: ["Array", "Two Pointers", "Greedy", "Sorting", "Heap"],
    companies: ["Amazon", "Microsoft", "Facebook", "Google"],
    frequency: 8,
    timeComplexity: "O(n log n)",
    spaceComplexity: "O(n)",
    approach: "Min heap to track room end times",
    isImported: false
  },

  // GRAPHS (12 questions)
  {
    title: "Number of Islands",
    description: "Given an m x n 2D binary grid grid which represents a map of '1's (land) and '0's (water), return the number of islands.",
    topic: "Graph",
    difficulty: Difficulty.MEDIUM,
    leetcodeUrl: "https://leetcode.com/problems/number-of-islands/",
    platform: "LeetCode",
    tags: ["Array", "Depth-First Search", "Breadth-First Search", "Union Find", "Matrix"],
    companies: ["Amazon", "Microsoft", "Facebook", "Google"],
    frequency: 9,
    timeComplexity: "O(m * n)",
    spaceComplexity: "O(m * n)",
    approach: "DFS/BFS to mark connected land cells",
    isImported: false
  },
  {
    title: "Clone Graph",
    description: "Given a reference of a node in a connected undirected graph, return a deep copy (clone) of the graph.",
    topic: "Graph",
    difficulty: Difficulty.MEDIUM,
    leetcodeUrl: "https://leetcode.com/problems/clone-graph/",
    platform: "LeetCode",
    tags: ["Hash Table", "Depth-First Search", "Breadth-First Search", "Graph"],
    companies: ["Amazon", "Microsoft", "Facebook", "Google"],
    frequency: 7,
    timeComplexity: "O(N + M)",
    spaceComplexity: "O(N)",
    approach: "DFS/BFS with hash map to track cloned nodes",
    isImported: false
  },
  {
    title: "Course Schedule",
    description: "There are a total of numCourses courses you have to take. Given the total number of courses and a list of prerequisite pairs, is it possible for you to finish all courses?",
    topic: "Graph",
    difficulty: Difficulty.MEDIUM,
    leetcodeUrl: "https://leetcode.com/problems/course-schedule/",
    platform: "LeetCode",
    tags: ["Depth-First Search", "Breadth-First Search", "Graph", "Topological Sort"],
    companies: ["Amazon", "Microsoft", "Facebook", "Zenefits"],
    frequency: 8,
    timeComplexity: "O(V + E)",
    spaceComplexity: "O(V + E)",
    approach: "Topological sort using DFS cycle detection or BFS with indegree",
    isImported: false
  },
  {
    title: "Pacific Atlantic Water Flow",
    description: "Given an m x n rectangular island that borders both the Pacific Ocean and Atlantic Ocean, find all cells from which rain water can flow to both oceans.",
    topic: "Graph",
    difficulty: Difficulty.MEDIUM,
    leetcodeUrl: "https://leetcode.com/problems/pacific-atlantic-water-flow/",
    platform: "LeetCode",
    tags: ["Array", "Depth-First Search", "Breadth-First Search", "Matrix"],
    companies: ["Amazon", "Microsoft", "Google"],
    frequency: 6,
    timeComplexity: "O(m * n)",
    spaceComplexity: "O(m * n)",
    approach: "DFS from both ocean borders to find reachable cells",
    isImported: false
  },
  {
    title: "Graph Valid Tree",
    description: "Given n nodes labeled from 0 to n-1 and a list of undirected edges, write a function to check whether these edges make up a valid tree.",
    topic: "Graph",
    difficulty: Difficulty.MEDIUM,
    leetcodeUrl: "https://leetcode.com/problems/graph-valid-tree/",
    platform: "LeetCode",
    tags: ["Depth-First Search", "Breadth-First Search", "Union Find", "Graph"],
    companies: ["Amazon", "Microsoft", "Facebook", "Google"],
    frequency: 6,
    timeComplexity: "O(V + E)",
    spaceComplexity: "O(V + E)",
    approach: "Check connected and no cycles using DFS/Union Find",
    isImported: false
  },
  {
    title: "Word Ladder",
    description: "A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words such that adjacent words differ by one letter. Return the length of the shortest transformation sequence.",
    topic: "Graph",
    difficulty: Difficulty.HARD,
    leetcodeUrl: "https://leetcode.com/problems/word-ladder/",
    platform: "LeetCode",
    tags: ["Hash Table", "String", "Breadth-First Search"],
    companies: ["Amazon", "Microsoft", "Facebook", "Yelp"],
    frequency: 6,
    timeComplexity: "O(MÂ² Ã N)",
    spaceComplexity: "O(MÂ² Ã N)",
    approach: "BFS with word transformation as edges",
    isImported: false
  },
  {
    title: "Surrounded Regions",
    description: "Given an m x n matrix board containing 'X' and 'O', capture all regions that are 4-directionally surrounded by 'X'.",
    topic: "Graph",
    difficulty: Difficulty.MEDIUM,
    leetcodeUrl: "https://leetcode.com/problems/surrounded-regions/",
    platform: "LeetCode",
    tags: ["Array", "Depth-First Search", "Breadth-First Search", "Union Find", "Matrix"],
    companies: ["Amazon", "Microsoft", "Uber"],
    frequency: 5,
    timeComplexity: "O(m * n)",
    spaceComplexity: "O(m * n)",
    approach: "DFS from borders to mark unsurrounded regions",
    isImported: false
  },
  {
    title: "Alien Dictionary",
    description: "There is a new alien language that uses the English alphabet. Given a list of strings words from the alien language's dictionary, return the order of characters in the alien language.",
    topic: "Graph",
    difficulty: Difficulty.HARD,
    leetcodeUrl: "https://leetcode.com/problems/alien-dictionary/",
    platform: "LeetCode",
    tags: ["Array", "String", "Depth-First Search", "Breadth-First Search", "Graph", "Topological Sort"],
    companies: ["Amazon", "Microsoft", "Facebook", "Google"],
    frequency: 7,
    timeComplexity: "O(C)",
    spaceComplexity: "O(1)",
    approach: "Build character dependency graph, then topological sort",
    isImported: false
  },
  {
    title: "Network Delay Time",
    description: "You are given a network of n nodes, labeled from 1 to n. You are also given times, a list of travel times as directed edges times[i] = (ui, vi, wi). Send a signal from a given node k. Return the time it takes for all n nodes to receive the signal.",
    topic: "Graph",
    difficulty: Difficulty.MEDIUM,
    leetcodeUrl: "https://leetcode.com/problems/network-delay-time/",
    platform: "LeetCode",
    tags: ["Depth-First Search", "Breadth-First Search", "Graph", "Shortest Path", "Heap"],
    companies: ["Amazon", "Microsoft", "Google"],
    frequency: 6,
    timeComplexity: "O((V + E) log V)",
    spaceComplexity: "O(V + E)",
    approach: "Dijkstra's algorithm for shortest path from source",
    isImported: false
  },
  {
    title: "Cheapest Flights Within K Stops",
    description: "There are n cities connected by some number of flights. Find the cheapest price from src to dst with at most k stops.",
    topic: "Graph",
    difficulty: Difficulty.MEDIUM,
    leetcodeUrl: "https://leetcode.com/problems/cheapest-flights-within-k-stops/",
    platform: "LeetCode",
    tags: ["Dynamic Programming", "Depth-First Search", "Breadth-First Search", "Graph", "Shortest Path", "Heap"],
    companies: ["Amazon", "Microsoft", "Expedia"],
    frequency: 6,
    timeComplexity: "O(K * E)",
    spaceComplexity: "O(V)",
    approach: "Modified Dijkstra or Bellman-Ford with stop constraint",
    isImported: false
  },
  {
    title: "Rotting Oranges",
    description: "You are given an m x n grid where each cell can have one of three values: 0 (empty), 1 (fresh orange), or 2 (rotten orange). Return the minimum number of minutes that must elapse until no cell has a fresh orange.",
    topic: "Graph",
    difficulty: Difficulty.MEDIUM,
    leetcodeUrl: "https://leetcode.com/problems/rotting-oranges/",
    platform: "LeetCode",
    tags: ["Array", "Breadth-First Search", "Matrix"],
    companies: ["Amazon", "Microsoft", "Bloomberg"],
    frequency: 7,
    timeComplexity: "O(m * n)",
    spaceComplexity: "O(m * n)",
    approach: "Multi-source BFS from all initial rotten oranges",
    isImported: false
  },
  {
    title: "Redundant Connection",
    description: "In this problem, a tree is an undirected graph that is connected and has no cycles. You are given a graph that started as a tree with n nodes, but one additional edge was added. Find an edge that can be removed so that the resulting graph is a tree.",
    topic: "Graph",
    difficulty: Difficulty.MEDIUM,
    leetcodeUrl: "https://leetcode.com/problems/redundant-connection/",
    platform: "LeetCode",
    tags: ["Depth-First Search", "Breadth-First Search", "Union Find", "Graph"],
    companies: ["Amazon", "Microsoft", "Google"],
    frequency: 5,
    timeComplexity: "O(N Î±(N))",
    spaceComplexity: "O(N)",
    approach: "Union Find to detect cycle-creating edge",
    isImported: false
  },

  // HASH TABLES (10 questions)
  {
    title: "Two Sum",
    description: "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.",
    topic: "Hash Table",
    difficulty: Difficulty.EASY,
    leetcodeUrl: "https://leetcode.com/problems/two-sum/",
    platform: "LeetCode",
    tags: ["Array", "Hash Table"],
    companies: ["Amazon", "Adobe", "Airbnb", "Apple"],
    frequency: 10,
    timeComplexity: "O(n)",
    spaceComplexity: "O(n)",
    approach: "Hash map to store complement values with indices",
    isImported: false
  },
  {
    title: "Group Anagrams",
    description: "Given an array of strings strs, group the anagrams together. You can return the answer in any order.",
    topic: "Hash Table",
    difficulty: Difficulty.MEDIUM,
    leetcodeUrl: "https://leetcode.com/problems/group-anagrams/",
    platform: "LeetCode",
    tags: ["Array", "Hash Table", "String", "Sorting"],
    companies: ["Amazon", "Microsoft", "Facebook", "Uber"],
    frequency: 8,
    timeComplexity: "O(N * K log K)",
    spaceComplexity: "O(N * K)",
    approach: "Hash map with sorted string as key or character frequency",
    isImported: false
  },
  {
    title: "Longest Substring Without Repeating Characters",
    description: "Given a string s, find the length of the longest substring without repeating characters.",
    topic: "Hash Table",
    difficulty: Difficulty.MEDIUM,
    leetcodeUrl: "https://leetcode.com/problems/longest-substring-without-repeating-characters/",
    platform: "LeetCode",
    tags: ["Hash Table", "String", "Sliding Window"],
    companies: ["Amazon", "Microsoft", "Facebook", "Adobe"],
    frequency: 9,
    timeComplexity: "O(n)",
    spaceComplexity: "O(min(m, n))",
    approach: "Sliding window with hash set/map to track characters",
    isImported: false
  },
  {
    title: "Valid Anagram",
    description: "Given two strings s and t, return true if t is an anagram of s, and false otherwise.",
    topic: "Hash Table",
    difficulty: Difficulty.EASY,
    leetcodeUrl: "https://leetcode.com/problems/valid-anagram/",
    platform: "LeetCode",
    tags: ["Hash Table", "String", "Sorting"],
    companies: ["Amazon", "Microsoft", "Bloomberg"],
    frequency: 7,
    timeComplexity: "O(n)",
    spaceComplexity: "O(1)",
    approach: "Character frequency count using hash map or array",
    isImported: false
  },
  {
    title: "Contains Duplicate",
    description: "Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.",
    topic: "Hash Table",
    difficulty: Difficulty.EASY,
    leetcodeUrl: "https://leetcode.com/problems/contains-duplicate/",
    platform: "LeetCode",
    tags: ["Array", "Hash Table", "Sorting"],
    companies: ["Amazon", "Microsoft", "Apple"],
    frequency: 6,
    timeComplexity: "O(n)",
    spaceComplexity: "O(n)",
    approach: "Hash set to track seen elements",
    isImported: false
  },
  {
    title: "First Missing Positive",
    description: "Given an unsorted integer array nums, return the smallest missing positive integer.",
    topic: "Hash Table",
    difficulty: Difficulty.HARD,
    leetcodeUrl: "https://leetcode.com/problems/first-missing-positive/",
    platform: "LeetCode",
    tags: ["Array", "Hash Table"],
    companies: ["Amazon", "Microsoft", "Facebook"],
    frequency: 6,
    timeComplexity: "O(n)",
    spaceComplexity: "O(1)",
    approach: "Use array indices as hash table or cycle sort",
    isImported: false
  },
  {
    title: "4Sum II",
    description: "Given four integer arrays nums1, nums2, nums3, and nums4 all of length n, return the number of tuples (i, j, k, l) such that nums1[i] + nums2[j] + nums3[k] + nums4[l] == 0.",
    topic: "Hash Table",
    difficulty: Difficulty.MEDIUM,
    leetcodeUrl: "https://leetcode.com/problems/4sum-ii/",
    platform: "LeetCode",
    tags: ["Array", "Hash Table"],
    companies: ["Amazon", "Microsoft", "LinkedIn"],
    frequency: 5,
    timeComplexity: "O(nÂ²)",
    spaceComplexity: "O(nÂ²)",
    approach: "Hash map for two-array sums, then check complement in other two",
    isImported: false
  },
  {
    title: "Subarray Sum Equals K",
    description: "Given an array of integers nums and an integer k, return the total number of continuous subarrays whose sum equals to k.",
    topic: "Hash Table",
    difficulty: Difficulty.MEDIUM,
    leetcodeUrl: "https://leetcode.com/problems/subarray-sum-equals-k/",
    platform: "LeetCode",
    tags: ["Array", "Hash Table", "Prefix Sum"],
    companies: ["Amazon", "Microsoft", "Facebook"],
    frequency: 7,
    timeComplexity: "O(n)",
    spaceComplexity: "O(n)",
    approach: "Prefix sum with hash map to count occurrences",
    isImported: false
  },
  {
    title: "Isomorphic Strings",
    description: "Given two strings s and t, determine if they are isomorphic. Two strings are isomorphic if the characters in s can be replaced to get t.",
    topic: "Hash Table",
    difficulty: Difficulty.EASY,
    leetcodeUrl: "https://leetcode.com/problems/isomorphic-strings/",
    platform: "LeetCode",
    tags: ["Hash Table", "String"],
    companies: ["Amazon", "Microsoft", "LinkedIn"],
    frequency: 5,
    timeComplexity: "O(n)",
    spaceComplexity: "O(1)",
    approach: "Two hash maps for bidirectional character mapping",
    isImported: false
  },
  {
    title: "Find All Anagrams in a String",
    description: "Given two strings s and p, return an array of all the start indices of p's anagrams in s.",
    topic: "Hash Table",
    difficulty: Difficulty.MEDIUM,
    leetcodeUrl: "https://leetcode.com/problems/find-all-anagrams-in-a-string/",
    platform: "LeetCode",
    tags: ["Hash Table", "String", "Sliding Window"],
    companies: ["Amazon", "Microsoft", "Facebook"],
    frequency: 6,
    timeComplexity: "O(s + p)",
    spaceComplexity: "O(1)",
    approach: "Sliding window with character frequency comparison",
    isImported: false
  },

  // BACKTRACKING (10 questions)
  {
    title: "Subsets",
    description: "Given an integer array nums of unique elements, return all possible subsets (the power set).",
    topic: "Backtracking",
    difficulty: Difficulty.MEDIUM,
    leetcodeUrl: "https://leetcode.com/problems/subsets/",
    platform: "LeetCode",
    tags: ["Array", "Backtracking", "Bit Manipulation"],
    companies: ["Amazon", "Microsoft", "Facebook"],
    frequency: 7,
    timeComplexity: "O(N Ã 2^N)",
    spaceComplexity: "O(N Ã 2^N)",
    approach: "Backtracking by including/excluding each element",
    isImported: false
  },
  {
    title: "Permutations",
    description: "Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.",
    topic: "Backtracking",
    difficulty: Difficulty.MEDIUM,
    leetcodeUrl: "https://leetcode.com/problems/permutations/",
    platform: "LeetCode",
    tags: ["Array", "Backtracking"],
    companies: ["Amazon", "Microsoft", "LinkedIn"],
    frequency: 7,
    timeComplexity: "O(N Ã N!)",
    spaceComplexity: "O(N)",
    approach: "Backtracking with visited array or swapping",
    isImported: false
  },
  {
    title: "Combination Sum",
    description: "Given an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target.",
    topic: "Backtracking",
    difficulty: Difficulty.MEDIUM,
    leetcodeUrl: "https://leetcode.com/problems/combination-sum/",
    platform: "LeetCode",
    tags: ["Array", "Backtracking"],
    companies: ["Amazon", "Microsoft", "Uber"],
    frequency: 6,
    timeComplexity: "O(N^(T/M))",
    spaceComplexity: "O(T/M)",
    approach: "Backtracking with reusable candidates",
    isImported: false
  },
  {
    title: "Word Search",
    description: "Given an m x n grid of characters board and a string word, return true if word exists in the grid.",
    topic: "Backtracking",
    difficulty: Difficulty.MEDIUM,
    leetcodeUrl: "https://leetcode.com/problems/word-search/",
    platform: "LeetCode",
    tags: ["Array", "Backtracking", "Matrix"],
    companies: ["Amazon", "Microsoft", "Facebook"],
    frequency: 7,
    timeComplexity: "O(N Ã 3^L)",
    spaceComplexity: "O(L)",
    approach: "DFS backtracking with visited marking",
    isImported: false
  },
  {
    title: "N-Queens",
    description: "The n-queens puzzle is the problem of placing n queens on an nÃn chessboard such that no two queens attack each other.",
    topic: "Backtracking",
    difficulty: Difficulty.HARD,
    leetcodeUrl: "https://leetcode.com/problems/n-queens/",
    platform: "LeetCode",
    tags: ["Array", "Backtracking"],
    companies: ["Amazon", "Microsoft", "Uber"],
    frequency: 5,
    timeComplexity: "O(N!)",
    spaceComplexity: "O(N)",
    approach: "Backtracking with conflict checking for rows, columns, diagonals",
    isImported: false
  },
  {
    title: "Letter Combinations of a Phone Number",
    description: "Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent.",
    topic: "Backtracking",
    difficulty: Difficulty.MEDIUM,
    leetcodeUrl: "https://leetcode.com/problems/letter-combinations-of-a-phone-number/",
    platform: "LeetCode",
    tags: ["Hash Table", "String", "Backtracking"],
    companies: ["Amazon", "Microsoft", "Facebook"],
    frequency: 6,
    timeComplexity: "O(3^N Ã 4^M)",
    spaceComplexity: "O(3^N Ã 4^M)",
    approach: "Backtracking through digit-to-letter mappings",
    isImported: false
  },
  {
    title: "Palindrome Partitioning",
    description: "Given a string s, partition s such that every substring of the partition is a palindrome. Return all possible palindrome partitioning of s.",
    topic: "Backtracking",
    difficulty: Difficulty.MEDIUM,
    leetcodeUrl: "https://leetcode.com/problems/palindrome-partitioning/",
    platform: "LeetCode",
    tags: ["String", "Dynamic Programming", "Backtracking"],
    companies: ["Amazon", "Microsoft", "Uber"],
    frequency: 5,
    timeComplexity: "O(N Ã 2^N)",
    spaceComplexity: "O(N)",
    approach: "Backtracking with palindrome checking",
    isImported: false
  },
  {
    title: "Sudoku Solver",
    description: "Write a program to solve a Sudoku puzzle by filling the empty cells.",
    topic: "Backtracking",
    difficulty: Difficulty.HARD,
    leetcodeUrl: "https://leetcode.com/problems/sudoku-solver/",
    platform: "LeetCode",
    tags: ["Array", "Hash Table", "Backtracking", "Matrix"],
    companies: ["Amazon", "Microsoft", "Uber"],
    frequency: 4,
    timeComplexity: "O(9^(N*N))",
    spaceComplexity: "O(N*N)",
    approach: "Backtracking with constraint checking for rows, columns, boxes",
    isImported: false
  },
  {
    title: "Restore IP Addresses",
    description: "A valid IP address consists of exactly four integers separated by single dots. Given a string s containing only digits, return all possible valid IP addresses that can be obtained from s.",
    topic: "Backtracking",
    difficulty: Difficulty.MEDIUM,
    leetcodeUrl: "https://leetcode.com/problems/restore-ip-addresses/",
    platform: "LeetCode",
    tags: ["String", "Backtracking"],
    companies: ["Amazon", "Microsoft", "Facebook"],
    frequency: 5,
    timeComplexity: "O(3^4)",
    spaceComplexity: "O(3^4)",
    approach: "Backtracking with IP segment validation",
    isImported: false
  },
  {
    title: "Combinations",
    description: "Given two integers n and k, return all possible combinations of k numbers out of the range [1, n].",
    topic: "Backtracking",
    difficulty: Difficulty.MEDIUM,
    leetcodeUrl: "https://leetcode.com/problems/combinations/",
    platform: "LeetCode",
    tags: ["Backtracking"],
    companies: ["Amazon", "Microsoft", "Google"],
    frequency: 5,
    timeComplexity: "O(k Ã C(n,k))",
    spaceComplexity: "O(C(n,k))",
    approach: "Backtracking to generate combinations of k elements",
    isImported: false
  }
];

async function seedCuratedQuestions() {
  try {
    console.log('=== Seeding Curated DSA Questions ===');
    
    // Check if curated questions already exist
    const existingCurated = await prisma.dSAQuestion.findMany({
      where: { isImported: false },
      select: { id: true, title: true }
    });
    
    console.log(`Found ${existingCurated.length} existing curated questions`);
    
    if (existingCurated.length > 0) {
      console.log('Curated questions already exist. Skipping seeding.');
      console.log('Existing curated questions:');
      existingCurated.forEach((q, i) => {
        console.log(`${i + 1}. ${q.title}`);
      });
      return;
    }
    
    console.log(`Adding ${curatedQuestions.length} curated questions...`);
    
    // Insert curated questions
    let created = 0;
    for (const questionData of curatedQuestions) {
      try {
        await prisma.dSAQuestion.create({
          data: questionData
        });
        created++;
        console.log(`â Added: ${questionData.title} (${questionData.topic} - ${questionData.difficulty})`);
      } catch (error) {
        console.log(`â Failed to add: ${questionData.title} - ${error}`);
      }
    }
    
    console.log(`\n=== Seeding Complete ===`);
    console.log(`Successfully added ${created} curated questions`);
    
    // Show topic distribution
    const topicCounts = curatedQuestions.reduce((acc, q) => {
      acc[q.topic] = (acc[q.topic] || 0) + 1;
      return acc;
    }, {} as Record<string, number>);
    
    console.log('\n=== Topic Distribution ===');
    Object.entries(topicCounts).forEach(([topic, count]) => {
      console.log(`${topic}: ${count} questions`);
    });
    
    // Show difficulty distribution
    const difficultyColors = curatedQuestions.reduce((acc, q) => {
      acc[q.difficulty] = (acc[q.difficulty] || 0) + 1;
      return acc;
    }, {} as Record<string, number>);
    
    console.log('\n=== Difficulty Distribution ===');
    Object.entries(difficultyColors).forEach(([difficulty, count]) => {
      console.log(`${difficulty}: ${count} questions`);
    });
    
  } catch (error) {
    console.error('Error seeding curated questions:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Run the seeding
seedCuratedQuestions().catch(console.error);

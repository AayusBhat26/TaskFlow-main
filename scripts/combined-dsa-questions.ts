import { PrismaClient, Difficulty } from '@prisma/client';
import { v4 as uuidv4 } from 'uuid';

const prisma = new PrismaClient();

// Comprehensive DSA Questions Collection (500+ Questions)
// Sources: Love Babbar 450, Striver's A2Z & SDE Sheet, LeetCode Top Problems, GeeksforGeeks, Company Questions
export const combinedDSAQuestions = [
  // ========== ARRAYS (Love Babbar + Striver) ==========
  {
    title: "Reverse an Array",
    description: "Write a function to reverse an array without using any additional space",
    topic: "Array",
    difficulty: "EASY" as Difficulty,
    leetcodeUrl: "https://leetcode.com/problems/reverse-string/",
    platform: "Multiple",
    tags: ["Array", "Two Pointers"],
    companies: ["Amazon", "Microsoft", "Google"],
    frequency: 8,
    approach: "Use two pointers from start and end",
    source: "Love Babbar"
  },
  {
    title: "Find Maximum and Minimum in Array",
    description: "Find the maximum and minimum element in an array using minimum comparisons",
    topic: "Array", 
    difficulty: "EASY" as Difficulty,
    platform: "GeeksforGeeks",
    tags: ["Array", "Divide and Conquer"],
    companies: ["Amazon", "Microsoft"],
    frequency: 7,
    approach: "Tournament method or divide and conquer",
    source: "Love Babbar"
  },
  {
    title: "Kth Largest Element",
    description: "Find the kth largest element in an unsorted array",
    topic: "Array",
    difficulty: "MEDIUM" as Difficulty,
    leetcodeUrl: "https://leetcode.com/problems/kth-largest-element-in-an-array/",
    platform: "LeetCode",
    tags: ["Array", "Heap", "Quickselect"],
    companies: ["Amazon", "Facebook", "Microsoft"],
    frequency: 9,
    timeComplexity: "O(n)",
    spaceComplexity: "O(1)",
    approach: "Quickselect algorithm",
    source: "Love Babbar"
  },
  {
    title: "Sort Colors (Dutch Flag)",
    description: "Sort array consisting of only 0s, 1s and 2s without using sorting algorithm",
    topic: "Array",
    difficulty: "MEDIUM" as Difficulty,
    leetcodeUrl: "https://leetcode.com/problems/sort-colors/",
    platform: "LeetCode", 
    tags: ["Array", "Two Pointers", "Sorting"],
    companies: ["Microsoft", "Adobe", "Amazon"],
    frequency: 8,
    timeComplexity: "O(n)",
    spaceComplexity: "O(1)",
    approach: "Dutch National Flag algorithm",
    source: "Love Babbar"
  },
  {
    title: "Move Negative Elements to One Side",
    description: "Move all negative numbers to beginning and positive to end with constant extra space",
    topic: "Array",
    difficulty: "EASY" as Difficulty,
    platform: "GeeksforGeeks",
    tags: ["Array", "Two Pointers"],
    companies: ["Amazon", "Accolite"],
    frequency: 6,
    approach: "Two pointers technique",
    source: "Love Babbar"
  },
  {
    title: "Union and Intersection of Arrays",
    description: "Find union and intersection of two sorted arrays",
    topic: "Array",
    difficulty: "EASY" as Difficulty,
    platform: "GeeksforGeeks",
    tags: ["Array", "Hash Table"],
    companies: ["Amazon", "Microsoft"],
    frequency: 7,
    approach: "Two pointer technique or hash set",
    source: "Love Babbar"
  },
  {
    title: "Rotate Array by One",
    description: "Write a program to cyclically rotate an array by one position",
    topic: "Array",
    difficulty: "EASY" as Difficulty,
    platform: "GeeksforGeeks",
    tags: ["Array"],
    companies: ["Amazon", "Microsoft"],
    frequency: 6,
    approach: "Store last element and shift others",
    source: "Love Babbar"
  },
  {
    title: "Maximum Subarray (Kadane's Algorithm)",
    description: "Find the contiguous subarray with the largest sum",
    topic: "Array",
    difficulty: "MEDIUM" as Difficulty,
    leetcodeUrl: "https://leetcode.com/problems/maximum-subarray/",
    platform: "LeetCode",
    tags: ["Array", "Dynamic Programming"],
    companies: ["Amazon", "Microsoft", "Google", "Apple"],
    frequency: 10,
    timeComplexity: "O(n)",
    spaceComplexity: "O(1)",
    approach: "Kadane's algorithm",
    source: "Both"
  },
  {
    title: "Minimize Height Difference",
    description: "Minimize the maximum difference between the heights by adding/subtracting k to each element",
    topic: "Array",
    difficulty: "MEDIUM" as Difficulty,
    platform: "GeeksforGeeks",
    tags: ["Array", "Greedy"],
    companies: ["Amazon", "Microsoft"],
    frequency: 7,
    approach: "Greedy approach with sorting",
    source: "Love Babbar"
  },
  {
    title: "Minimum Jumps to Reach End",
    description: "Find minimum number of jumps to reach end of array",
    topic: "Array",
    difficulty: "MEDIUM" as Difficulty,
    leetcodeUrl: "https://leetcode.com/problems/jump-game-ii/",
    platform: "LeetCode",
    tags: ["Array", "Greedy", "Dynamic Programming"],
    companies: ["Amazon", "Microsoft", "Google"],
    frequency: 8,
    approach: "Greedy approach",
    source: "Love Babbar"
  },

  // ========== STRINGS ==========
  {
    title: "Reverse a String",
    description: "Write a function that reverses a string",
    topic: "String",
    difficulty: "EASY" as Difficulty,
    leetcodeUrl: "https://leetcode.com/problems/reverse-string/",
    platform: "LeetCode",
    tags: ["String", "Two Pointers"],
    companies: ["Amazon", "Microsoft"],
    frequency: 6,
    approach: "Two pointers technique",
    source: "Love Babbar"
  },
  {
    title: "Check Palindrome",
    description: "Check whether a string is palindrome or not",
    topic: "String",
    difficulty: "EASY" as Difficulty,
    leetcodeUrl: "https://leetcode.com/problems/valid-palindrome/",
    platform: "LeetCode",
    tags: ["String", "Two Pointers"],
    companies: ["Amazon", "Microsoft", "Apple"],
    frequency: 8,
    approach: "Two pointers from both ends",
    source: "Love Babbar"
  },
  {
    title: "Find Duplicate Characters",
    description: "Find duplicate characters in a string",
    topic: "String",
    difficulty: "EASY" as Difficulty,
    platform: "GeeksforGeeks",
    tags: ["String", "Hash Table"],
    companies: ["Amazon", "Microsoft"],
    frequency: 6,
    approach: "Hash map to count frequencies",
    source: "Love Babbar"
  },
  {
    title: "Check String Rotation",
    description: "Check whether one string is rotation of another string",
    topic: "String",
    difficulty: "MEDIUM" as Difficulty,
    platform: "GeeksforGeeks",
    tags: ["String"],
    companies: ["Amazon", "Microsoft"],
    frequency: 7,
    approach: "Concatenate and check substring",
    source: "Love Babbar"
  },
  {
    title: "Longest Palindromic Substring",
    description: "Find the longest palindromic substring",
    topic: "String",
    difficulty: "MEDIUM" as Difficulty,
    leetcodeUrl: "https://leetcode.com/problems/longest-palindromic-substring/",
    platform: "LeetCode",
    tags: ["String", "Dynamic Programming"],
    companies: ["Amazon", "Microsoft", "Apple", "Facebook"],
    frequency: 9,
    approach: "Expand around centers or Manacher's algorithm",
    source: "Both"
  },
  {
    title: "Longest Common Subsequence",
    description: "Find the length of longest common subsequence between two strings",
    topic: "String",
    difficulty: "MEDIUM" as Difficulty,
    leetcodeUrl: "https://leetcode.com/problems/longest-common-subsequence/",
    platform: "LeetCode",
    tags: ["String", "Dynamic Programming"],
    companies: ["Amazon", "Microsoft", "Google"],
    frequency: 8,
    approach: "Dynamic Programming",
    source: "Love Babbar"
  },

  // ========== LINKED LISTS ==========
  {
    title: "Reverse Linked List",
    description: "Reverse a singly linked list both iteratively and recursively",
    topic: "Linked List",
    difficulty: "EASY" as Difficulty,
    leetcodeUrl: "https://leetcode.com/problems/reverse-linked-list/",
    platform: "LeetCode",
    tags: ["Linked List", "Recursion"],
    companies: ["Amazon", "Microsoft", "Google", "Apple", "Facebook"],
    frequency: 10,
    timeComplexity: "O(n)",
    spaceComplexity: "O(1)",
    approach: "Iterative with three pointers",
    source: "Both"
  },
  {
    title: "Reverse Linked List in Groups",
    description: "Reverse nodes of linked list k at a time",
    topic: "Linked List",
    difficulty: "HARD" as Difficulty,
    leetcodeUrl: "https://leetcode.com/problems/reverse-nodes-in-k-group/",
    platform: "LeetCode",
    tags: ["Linked List", "Recursion"],
    companies: ["Amazon", "Microsoft", "Facebook"],
    frequency: 8,
    approach: "Recursive approach with group processing",
    source: "Both"
  },
  {
    title: "Detect Loop in Linked List",
    description: "Detect if there is a cycle in linked list",
    topic: "Linked List",
    difficulty: "EASY" as Difficulty,
    leetcodeUrl: "https://leetcode.com/problems/linked-list-cycle/",
    platform: "LeetCode",
    tags: ["Linked List", "Two Pointers"],
    companies: ["Amazon", "Microsoft", "Apple"],
    frequency: 9,
    approach: "Floyd's Cycle Detection (Tortoise and Hare)",
    source: "Both"
  },
  {
    title: "Remove Loop from Linked List",
    description: "Detect and remove loop in a linked list",
    topic: "Linked List", 
    difficulty: "MEDIUM" as Difficulty,
    platform: "GeeksforGeeks",
    tags: ["Linked List", "Two Pointers"],
    companies: ["Amazon", "Microsoft"],
    frequency: 7,
    approach: "Floyd's algorithm + finding loop start",
    source: "Love Babbar"
  },
  {
    title: "Find Starting Point of Loop",
    description: "Find the starting point of loop in linked list",
    topic: "Linked List",
    difficulty: "MEDIUM" as Difficulty,
    leetcodeUrl: "https://leetcode.com/problems/linked-list-cycle-ii/",
    platform: "LeetCode", 
    tags: ["Linked List", "Two Pointers"],
    companies: ["Amazon", "Microsoft", "Google"],
    frequency: 8,
    approach: "Floyd's algorithm extended",
    source: "Love Babbar"
  },
  {
    title: "Merge Two Sorted Lists",
    description: "Merge two sorted linked lists and return as new sorted list",
    topic: "Linked List",
    difficulty: "EASY" as Difficulty,
    leetcodeUrl: "https://leetcode.com/problems/merge-two-sorted-lists/",
    platform: "LeetCode",
    tags: ["Linked List", "Recursion"],
    companies: ["Amazon", "Microsoft", "Apple", "Google"],
    frequency: 9,
    approach: "Two pointers or recursion",
    source: "Both"
  },

  // ========== TREES ==========
  {
    title: "Binary Tree Inorder Traversal",
    description: "Given binary tree, return inorder traversal of its nodes",
    topic: "Binary Tree",
    difficulty: "EASY" as Difficulty,
    leetcodeUrl: "https://leetcode.com/problems/binary-tree-inorder-traversal/",
    platform: "LeetCode",
    tags: ["Tree", "Stack", "Recursion"],
    companies: ["Amazon", "Microsoft", "Google"],
    frequency: 8,
    approach: "Recursive or iterative with stack",
    source: "Both"
  },
  {
    title: "Binary Tree Level Order Traversal",
    description: "Return level order traversal of binary tree nodes",
    topic: "Binary Tree",
    difficulty: "MEDIUM" as Difficulty,
    leetcodeUrl: "https://leetcode.com/problems/binary-tree-level-order-traversal/",
    platform: "LeetCode",
    tags: ["Tree", "BFS", "Queue"],
    companies: ["Amazon", "Microsoft", "Apple", "Facebook"],
    frequency: 9,
    approach: "BFS using queue",
    source: "Both"
  },
  {
    title: "Maximum Depth of Binary Tree",
    description: "Find the maximum depth of a binary tree",
    topic: "Binary Tree",
    difficulty: "EASY" as Difficulty,
    leetcodeUrl: "https://leetcode.com/problems/maximum-depth-of-binary-tree/",
    platform: "LeetCode",
    tags: ["Tree", "DFS", "Recursion"],
    companies: ["Amazon", "Microsoft", "Apple"],
    frequency: 8,
    approach: "Recursive DFS",
    source: "Both"
  },
  {
    title: "Validate Binary Search Tree",
    description: "Determine if a given binary tree is a valid BST",
    topic: "Binary Search Tree",
    difficulty: "MEDIUM" as Difficulty,
    leetcodeUrl: "https://leetcode.com/problems/validate-binary-search-tree/",
    platform: "LeetCode",
    tags: ["Tree", "DFS", "BST"],
    companies: ["Amazon", "Microsoft", "Facebook", "Apple"],
    frequency: 9,
    approach: "Inorder traversal or bounds checking",
    source: "Both"
  },
  {
    title: "Lowest Common Ancestor",
    description: "Find the lowest common ancestor of two nodes in BST",
    topic: "Binary Search Tree",
    difficulty: "MEDIUM" as Difficulty,
    leetcodeUrl: "https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree/",
    platform: "LeetCode",
    tags: ["Tree", "BST"],
    companies: ["Amazon", "Microsoft", "Google", "Facebook"],
    frequency: 8,
    approach: "Recursive traversal using BST property",
    source: "Both"
  },

  // ========== MORE ARRAYS (Love Babbar + LeetCode) ==========
  {
    title: "Find Duplicate in Array",
    description: "Find the duplicate number in array of n+1 integers where each integer is between 1 and n",
    topic: "Array",
    difficulty: "MEDIUM" as Difficulty,
    leetcodeUrl: "https://leetcode.com/problems/find-the-duplicate-number/",
    platform: "LeetCode",
    tags: ["Array", "Two Pointers", "Binary Search"],
    companies: ["Amazon", "Microsoft", "Google"],
    frequency: 8,
    timeComplexity: "O(n)",
    spaceComplexity: "O(1)",
    approach: "Floyd's cycle detection or binary search",
    source: "Love Babbar"
  },
  {
    title: "Merge Two Sorted Arrays",
    description: "Merge two sorted arrays without using extra space",
    topic: "Array",
    difficulty: "HARD" as Difficulty,
    platform: "GeeksforGeeks",
    tags: ["Array", "Two Pointers"],
    companies: ["Amazon", "Microsoft", "Google"],
    frequency: 8,
    approach: "Gap method or shell sort approach",
    source: "Love Babbar"
  },
  {
    title: "Count Inversions",
    description: "Count number of inversions in an array",
    topic: "Array",
    difficulty: "MEDIUM" as Difficulty,
    platform: "GeeksforGeeks",
    tags: ["Array", "Merge Sort", "Divide and Conquer"],
    companies: ["Amazon", "Microsoft"],
    frequency: 7,
    timeComplexity: "O(n log n)",
    spaceComplexity: "O(n)",
    approach: "Modified merge sort",
    source: "Love Babbar"
  },
  {
    title: "Best Time to Buy and Sell Stock",
    description: "Find maximum profit from buying and selling stock once",
    topic: "Array",
    difficulty: "EASY" as Difficulty,
    leetcodeUrl: "https://leetcode.com/problems/best-time-to-buy-and-sell-stock/",
    platform: "LeetCode",
    tags: ["Array", "Dynamic Programming"],
    companies: ["Amazon", "Microsoft", "Apple", "Facebook"],
    frequency: 10,
    timeComplexity: "O(n)",
    spaceComplexity: "O(1)",
    approach: "Track minimum price and maximum profit",
    source: "Both"
  },
  {
    title: "Find All Pairs with Given Sum",
    description: "Find all pairs in array whose sum equals given number",
    topic: "Array",
    difficulty: "EASY" as Difficulty,
    platform: "GeeksforGeeks",
    tags: ["Array", "Hash Table", "Two Pointers"],
    companies: ["Amazon", "Microsoft"],
    frequency: 7,
    approach: "Hash set or two pointers for sorted array",
    source: "Love Babbar"
  },
  {
    title: "Common Elements in 3 Sorted Arrays",
    description: "Find common elements in three sorted arrays",
    topic: "Array",
    difficulty: "EASY" as Difficulty,
    platform: "GeeksforGeeks",
    tags: ["Array", "Three Pointers"],
    companies: ["Amazon", "Microsoft"],
    frequency: 6,
    approach: "Three pointers technique",
    source: "Love Babbar"
  },
  {
    title: "Rearrange Array Alternating Positive Negative",
    description: "Rearrange array in alternating positive and negative items",
    topic: "Array",
    difficulty: "MEDIUM" as Difficulty,
    platform: "GeeksforGeeks",
    tags: ["Array", "Two Pointers"],
    companies: ["Amazon", "Microsoft"],
    frequency: 6,
    approach: "Two pointers with careful swapping",
    source: "Love Babbar"
  },
  {
    title: "Subarray with Zero Sum",
    description: "Find if there is any subarray with sum equal to 0",
    topic: "Array",
    difficulty: "MEDIUM" as Difficulty,
    platform: "GeeksforGeeks",
    tags: ["Array", "Hash Table", "Prefix Sum"],
    companies: ["Amazon", "Microsoft"],
    frequency: 7,
    approach: "Prefix sum with hash set",
    source: "Love Babbar"
  },
  {
    title: "Factorial of Large Number",
    description: "Find factorial of a large number",
    topic: "Array",
    difficulty: "MEDIUM" as Difficulty,
    platform: "GeeksforGeeks",
    tags: ["Array", "Math"],
    companies: ["Amazon"],
    frequency: 5,
    approach: "Array multiplication",
    source: "Love Babbar"
  },
  {
    title: "Maximum Product Subarray",
    description: "Find contiguous subarray with maximum product",
    topic: "Array",
    difficulty: "MEDIUM" as Difficulty,
    leetcodeUrl: "https://leetcode.com/problems/maximum-product-subarray/",
    platform: "LeetCode",
    tags: ["Array", "Dynamic Programming"],
    companies: ["Amazon", "LinkedIn", "Microsoft"],
    frequency: 8,
    timeComplexity: "O(n)",
    spaceComplexity: "O(1)",
    approach: "Track both max and min products",
    source: "Both"
  },
  {
    title: "Longest Consecutive Subsequence",
    description: "Find length of longest consecutive elements sequence",
    topic: "Array",
    difficulty: "MEDIUM" as Difficulty,
    leetcodeUrl: "https://leetcode.com/problems/longest-consecutive-sequence/",
    platform: "LeetCode",
    tags: ["Array", "Hash Table", "Union Find"],
    companies: ["Amazon", "Google", "Facebook"],
    frequency: 8,
    timeComplexity: "O(n)",
    spaceComplexity: "O(n)",
    approach: "Hash set with sequence building",
    source: "Both"
  },
  {
    title: "Elements Appearing More Than n/k Times",
    description: "Find all elements that appear more than n/k times",
    topic: "Array",
    difficulty: "MEDIUM" as Difficulty,
    platform: "GeeksforGeeks",
    tags: ["Array", "Hash Table"],
    companies: ["Amazon", "Google"],
    frequency: 6,
    approach: "Boyer-Moore majority vote algorithm",
    source: "Love Babbar"
  },
  {
    title: "Best Time to Buy Sell Stock Twice",
    description: "Maximum profit by buying and selling stock at most twice",
    topic: "Array",
    difficulty: "HARD" as Difficulty,
    leetcodeUrl: "https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/",
    platform: "LeetCode",
    tags: ["Array", "Dynamic Programming"],
    companies: ["Amazon", "Microsoft", "Google"],
    frequency: 7,
    timeComplexity: "O(n)",
    spaceComplexity: "O(1)",
    approach: "State machine DP",
    source: "Love Babbar"
  },
  {
    title: "Array Subset Check",
    description: "Check if array is subset of another array",
    topic: "Array",
    difficulty: "EASY" as Difficulty,
    platform: "GeeksforGeeks",
    tags: ["Array", "Hash Table"],
    companies: ["Amazon", "Microsoft"],
    frequency: 6,
    approach: "Hash set or sorting",
    source: "Love Babbar"
  },
  {
    title: "Triplet Sum to Given Value",
    description: "Find triplet that sums to given value",
    topic: "Array",
    difficulty: "MEDIUM" as Difficulty,
    leetcodeUrl: "https://leetcode.com/problems/3sum/",
    platform: "LeetCode",
    tags: ["Array", "Two Pointers", "Sorting"],
    companies: ["Amazon", "Facebook", "Microsoft"],
    frequency: 9,
    timeComplexity: "O(n²)",
    spaceComplexity: "O(1)",
    approach: "Sort and two pointers",
    source: "Both"
  },
  {
    title: "Trapping Rain Water",
    description: "Calculate how much water can be trapped after raining",
    topic: "Array",
    difficulty: "HARD" as Difficulty,
    leetcodeUrl: "https://leetcode.com/problems/trapping-rain-water/",
    platform: "LeetCode",
    tags: ["Array", "Two Pointers", "Dynamic Programming", "Stack"],
    companies: ["Amazon", "Google", "Facebook", "Apple"],
    frequency: 9,
    timeComplexity: "O(n)",
    spaceComplexity: "O(1)",
    approach: "Two pointers with left and right max",
    source: "Both"
  },
  {
    title: "Chocolate Distribution Problem",
    description: "Distribute chocolate packets to minimize difference",
    topic: "Array",
    difficulty: "EASY" as Difficulty,
    platform: "GeeksforGeeks",
    tags: ["Array", "Sorting"],
    companies: ["Amazon", "Accolite"],
    frequency: 7,
    approach: "Sort and sliding window",
    source: "Love Babbar"
  },
  {
    title: "Smallest Subarray with Sum Greater Than Value",
    description: "Find smallest subarray with sum greater than given value",
    topic: "Array",
    difficulty: "MEDIUM" as Difficulty,
    platform: "GeeksforGeeks",
    tags: ["Array", "Sliding Window"],
    companies: ["Amazon", "Microsoft"],
    frequency: 7,
    approach: "Sliding window technique",
    source: "Love Babbar"
  },
  {
    title: "Three Way Partitioning",
    description: "Partition array around a given value",
    topic: "Array",
    difficulty: "MEDIUM" as Difficulty,
    platform: "GeeksforGeeks",
    tags: ["Array", "Two Pointers"],
    companies: ["Amazon"],
    frequency: 5,
    approach: "Dutch flag algorithm variant",
    source: "Love Babbar"
  },
  {
    title: "Minimum Swaps to Bring Elements Together",
    description: "Minimum swaps to bring elements less than or equal to K together",
    topic: "Array",
    difficulty: "MEDIUM" as Difficulty,
    platform: "GeeksforGeeks",
    tags: ["Array", "Sliding Window"],
    companies: ["Amazon"],
    frequency: 5,
    approach: "Sliding window with counting",
    source: "Love Babbar"
  },
  {
    title: "Minimum Operations for Palindrome",
    description: "Minimum operations to make array palindrome",
    topic: "Array",
    difficulty: "MEDIUM" as Difficulty,
    platform: "GeeksforGeeks",
    tags: ["Array", "Greedy"],
    companies: ["Amazon"],
    frequency: 4,
    approach: "Two pointers with merging",
    source: "Love Babbar"
  },
  {
    title: "Median of Two Sorted Arrays",
    description: "Find median of two sorted arrays",
    topic: "Array",
    difficulty: "HARD" as Difficulty,
    leetcodeUrl: "https://leetcode.com/problems/median-of-two-sorted-arrays/",
    platform: "LeetCode",
    tags: ["Array", "Binary Search", "Divide and Conquer"],
    companies: ["Amazon", "Google", "Microsoft", "Apple"],
    frequency: 9,
    timeComplexity: "O(log(min(m,n)))",
    spaceComplexity: "O(1)",
    approach: "Binary search on smaller array",
    source: "Both"
  },

  // ========== MATRIX PROBLEMS ==========
  {
    title: "Spiral Matrix Traversal",
    description: "Return all elements of matrix in spiral order",
    topic: "Matrix",
    difficulty: "MEDIUM" as Difficulty,
    leetcodeUrl: "https://leetcode.com/problems/spiral-matrix/",
    platform: "LeetCode",
    tags: ["Array", "Matrix", "Simulation"],
    companies: ["Amazon", "Microsoft", "Google", "Apple"],
    frequency: 8,
    timeComplexity: "O(m*n)",
    spaceComplexity: "O(1)",
    approach: "Layer by layer traversal with boundaries",
    source: "Both"
  },
  {
    title: "Search in 2D Matrix",
    description: "Search for target value in sorted matrix",
    topic: "Matrix",
    difficulty: "MEDIUM" as Difficulty,
    leetcodeUrl: "https://leetcode.com/problems/search-a-2d-matrix/",
    platform: "LeetCode",
    tags: ["Array", "Binary Search", "Matrix"],
    companies: ["Amazon", "Microsoft", "Google"],
    frequency: 7,
    timeComplexity: "O(log(m*n))",
    spaceComplexity: "O(1)",
    approach: "Binary search treating as 1D array",
    source: "Both"
  },
  {
    title: "Find Median in Row-wise Sorted Matrix",
    description: "Find median in row-wise sorted matrix",
    topic: "Matrix",
    difficulty: "MEDIUM" as Difficulty,
    platform: "GeeksforGeeks",
    tags: ["Matrix", "Binary Search"],
    companies: ["Amazon", "Microsoft"],
    frequency: 6,
    approach: "Binary search on answer",
    source: "Love Babbar"
  },
  {
    title: "Row with Maximum 1s",
    description: "Find row with maximum number of 1s in binary matrix",
    topic: "Matrix",
    difficulty: "MEDIUM" as Difficulty,
    platform: "GeeksforGeeks",
    tags: ["Array", "Binary Search", "Matrix"],
    companies: ["Amazon", "Microsoft"],
    frequency: 6,
    approach: "Binary search or linear scan",
    source: "Love Babbar"
  },
  {
    title: "Print Elements in Sorted Order",
    description: "Print elements in sorted order using row-column wise sorted matrix",
    topic: "Matrix",
    difficulty: "MEDIUM" as Difficulty,
    platform: "GeeksforGeeks",
    tags: ["Matrix", "Heap"],
    companies: ["Amazon"],
    frequency: 5,
    approach: "Min heap with matrix traversal",
    source: "Love Babbar"
  },
  {
    title: "Maximum Size Rectangle",
    description: "Find maximum size rectangle of 1s in binary matrix",
    topic: "Matrix",
    difficulty: "HARD" as Difficulty,
    leetcodeUrl: "https://leetcode.com/problems/maximal-rectangle/",
    platform: "LeetCode",
    tags: ["Array", "Dynamic Programming", "Stack", "Matrix"],
    companies: ["Amazon", "Google", "Facebook"],
    frequency: 7,
    timeComplexity: "O(rows * cols)",
    spaceComplexity: "O(cols)",
    approach: "Largest rectangle in histogram for each row",
    source: "Both"
  },
  {
    title: "Rotate Matrix 90 Degrees",
    description: "Rotate matrix by 90 degrees clockwise",
    topic: "Matrix",
    difficulty: "MEDIUM" as Difficulty,
    leetcodeUrl: "https://leetcode.com/problems/rotate-image/",
    platform: "LeetCode",
    tags: ["Array", "Math", "Matrix"],
    companies: ["Amazon", "Microsoft", "Apple"],
    frequency: 8,
    timeComplexity: "O(n²)",
    spaceComplexity: "O(1)",
    approach: "Transpose then reverse rows",
    source: "Both"
  },
  {
    title: "Kth Smallest in Row-Column Sorted Matrix",
    description: "Find kth smallest element in row and column wise sorted matrix",
    topic: "Matrix",
    difficulty: "MEDIUM" as Difficulty,
    leetcodeUrl: "https://leetcode.com/problems/kth-smallest-element-in-a-sorted-matrix/",
    platform: "LeetCode",
    tags: ["Array", "Binary Search", "Sorting", "Heap", "Matrix"],
    companies: ["Amazon", "Google", "Facebook"],
    frequency: 7,
    timeComplexity: "O(n log(max-min))",
    spaceComplexity: "O(1)",
    approach: "Binary search on answer",
    source: "Both"
  },
  {
    title: "Set Matrix Zeroes",
    description: "If element is 0, set its entire row and column to 0",
    topic: "Matrix",
    difficulty: "MEDIUM" as Difficulty,
    leetcodeUrl: "https://leetcode.com/problems/set-matrix-zeroes/",
    platform: "LeetCode",
    tags: ["Array", "Hash Table", "Matrix"],
    companies: ["Amazon", "Microsoft", "Apple"],
    frequency: 7,
    timeComplexity: "O(m*n)",
    spaceComplexity: "O(1)",
    approach: "Use first row and column as markers",
    source: "LeetCode"
  },

  // ========== MORE STRINGS ==========
  {
    title: "Valid Shuffle of Two Strings",
    description: "Check whether a string is valid shuffle of two strings",
    topic: "String",
    difficulty: "MEDIUM" as Difficulty,
    platform: "GeeksforGeeks",
    tags: ["String", "Two Pointers"],
    companies: ["Amazon", "Microsoft"],
    frequency: 5,
    approach: "Two pointers technique",
    source: "Love Babbar"
  },
  {
    title: "Count and Say",
    description: "Generate count and say sequence",
    topic: "String",
    difficulty: "MEDIUM" as Difficulty,
    leetcodeUrl: "https://leetcode.com/problems/count-and-say/",
    platform: "LeetCode",
    tags: ["String"],
    companies: ["Amazon", "Facebook"],
    frequency: 6,
    approach: "Iterative string building",
    source: "Love Babbar"
  },
  {
    title: "Longest Recurring Subsequence",
    description: "Find length of longest recurring subsequence in string",
    topic: "String",
    difficulty: "MEDIUM" as Difficulty,
    platform: "GeeksforGeeks",
    tags: ["String", "Dynamic Programming"],
    companies: ["Amazon"],
    frequency: 5,
    approach: "Modified LCS",
    source: "Love Babbar"
  },
  {
    title: "Print All Subsequences",
    description: "Print all subsequences of a string",
    topic: "String",
    difficulty: "MEDIUM" as Difficulty,
    platform: "GeeksforGeeks",
    tags: ["String", "Recursion", "Backtracking"],
    companies: ["Amazon"],
    frequency: 5,
    approach: "Recursive backtracking",
    source: "Love Babbar"
  },
  {
    title: "Print All Permutations",
    description: "Print all permutations of a given string",
    topic: "String",
    difficulty: "MEDIUM" as Difficulty,
    leetcodeUrl: "https://leetcode.com/problems/permutations-ii/",
    platform: "LeetCode",
    tags: ["String", "Backtracking"],
    companies: ["Amazon", "Microsoft", "Google"],
    frequency: 8,
    approach: "Backtracking with swapping",
    source: "Both"
  },
  {
    title: "Split Binary String Equal 0s 1s",
    description: "Split binary string into two substrings with equal 0s and 1s",
    topic: "String",
    difficulty: "MEDIUM" as Difficulty,
    platform: "GeeksforGeeks",
    tags: ["String", "Greedy"],
    companies: ["Amazon"],
    frequency: 4,
    approach: "Count balance of 0s and 1s",
    source: "Love Babbar"
  },
  {
    title: "Word Wrap Problem",
    description: "Arrange words in lines with minimum cost",
    topic: "String",
    difficulty: "HARD" as Difficulty,
    platform: "GeeksforGeeks",
    tags: ["String", "Dynamic Programming"],
    companies: ["Amazon", "Microsoft"],
    frequency: 6,
    approach: "Dynamic programming with cost calculation",
    source: "Love Babbar"
  },
  {
    title: "Next Greater Number Same Digits",
    description: "Find next greater number with same set of digits",
    topic: "String",
    difficulty: "MEDIUM" as Difficulty,
    leetcodeUrl: "https://leetcode.com/problems/next-permutation/",
    platform: "LeetCode",
    tags: ["Array", "Two Pointers"],
    companies: ["Amazon", "Google", "Facebook"],
    frequency: 8,
    approach: "Next permutation algorithm",
    source: "Both"
  },
  {
    title: "Balanced Parentheses",
    description: "Check if parentheses are balanced",
    topic: "String",
    difficulty: "EASY" as Difficulty,
    leetcodeUrl: "https://leetcode.com/problems/valid-parentheses/",
    platform: "LeetCode",
    tags: ["String", "Stack"],
    companies: ["Amazon", "Microsoft", "Google", "Facebook"],
    frequency: 10,
    timeComplexity: "O(n)",
    spaceComplexity: "O(n)",
    approach: "Stack to match opening and closing brackets",
    source: "Both"
  },
  {
    title: "Word Break Problem",
    description: "Check if string can be segmented into dictionary words",
    topic: "String",
    difficulty: "MEDIUM" as Difficulty,
    leetcodeUrl: "https://leetcode.com/problems/word-break/",
    platform: "LeetCode",
    tags: ["Array", "Hash Table", "String", "Dynamic Programming"],
    companies: ["Amazon", "Google", "Facebook", "Microsoft"],
    frequency: 9,
    timeComplexity: "O(n²*m)",
    spaceComplexity: "O(n)",
    approach: "DP with substring checking",
    source: "Both"
  },
  {
    title: "Rabin Karp Algorithm",
    description: "Pattern searching using rolling hash",
    topic: "String",
    difficulty: "MEDIUM" as Difficulty,
    platform: "GeeksforGeeks",
    tags: ["String", "Rolling Hash"],
    companies: ["Google", "Amazon"],
    frequency: 6,
    approach: "Rolling hash with pattern matching",
    source: "Love Babbar"
  },
  {
    title: "KMP Algorithm",
    description: "Pattern searching using KMP algorithm",
    topic: "String",
    difficulty: "HARD" as Difficulty,
    platform: "GeeksforGeeks",
    tags: ["String", "KMP"],
    companies: ["Google", "Amazon"],
    frequency: 7,
    approach: "Build LPS array and pattern matching",
    source: "Love Babbar"
  },
  {
    title: "Mobile Numeric Keypad",
    description: "Convert sentence to mobile numeric keypad sequence",
    topic: "String",
    difficulty: "EASY" as Difficulty,
    platform: "GeeksforGeeks",
    tags: ["String", "Hash Table"],
    companies: ["Amazon"],
    frequency: 4,
    approach: "Hash map for character to number mapping",
    source: "Love Babbar"
  },
  {
    title: "Minimum Bracket Reversals",
    description: "Minimum bracket reversals to make expression balanced",
    topic: "String",
    difficulty: "MEDIUM" as Difficulty,
    platform: "GeeksforGeeks",
    tags: ["String", "Stack"],
    companies: ["Amazon", "Microsoft"],
    frequency: 6,
    approach: "Stack and mathematical formula",
    source: "Love Babbar"
  },
  {
    title: "Count Palindromic Subsequences",
    description: "Count all palindromic subsequences in string",
    topic: "String",
    difficulty: "HARD" as Difficulty,
    platform: "GeeksforGeeks",
    tags: ["String", "Dynamic Programming"],
    companies: ["Amazon", "Google"],
    frequency: 6,
    approach: "DP with character inclusion/exclusion",
    source: "Love Babbar"
  },
  {
    title: "Search Word in 2D Grid",
    description: "Search a word in 2D grid of characters",
    topic: "String",
    difficulty: "MEDIUM" as Difficulty,
    leetcodeUrl: "https://leetcode.com/problems/word-search/",
    platform: "LeetCode",
    tags: ["Array", "Backtracking", "Matrix"],
    companies: ["Amazon", "Microsoft", "Google"],
    frequency: 8,
    approach: "DFS backtracking",
    source: "Both"
  },
  {
    title: "Boyer Moore Algorithm",
    description: "Pattern searching using Boyer Moore algorithm",
    topic: "String",
    difficulty: "HARD" as Difficulty,
    platform: "GeeksforGeeks",
    tags: ["String", "Pattern Matching"],
    companies: ["Google"],
    frequency: 5,
    approach: "Bad character and good suffix heuristics",
    source: "Love Babbar"
  },
  {
    title: "Roman to Decimal",
    description: "Convert Roman numerals to decimal",
    topic: "String",
    difficulty: "EASY" as Difficulty,
    leetcodeUrl: "https://leetcode.com/problems/roman-to-integer/",
    platform: "LeetCode",
    tags: ["Hash Table", "Math", "String"],
    companies: ["Amazon", "Microsoft", "Apple"],
    frequency: 7,
    approach: "Hash map with left to right scanning",
    source: "Both"
  },
  {
    title: "Longest Common Prefix",
    description: "Find longest common prefix among array of strings",
    topic: "String",
    difficulty: "EASY" as Difficulty,
    leetcodeUrl: "https://leetcode.com/problems/longest-common-prefix/",
    platform: "LeetCode",
    tags: ["String"],
    companies: ["Amazon", "Microsoft", "Google"],
    frequency: 7,
    approach: "Vertical scanning or horizontal scanning",
    source: "Both"
  },
  {
    title: "Binary String Alternating Flips",
    description: "Number of flips to make binary string alternate",
    topic: "String",
    difficulty: "EASY" as Difficulty,
    platform: "GeeksforGeeks",
    tags: ["String", "Greedy"],
    companies: ["Amazon"],
    frequency: 5,
    approach: "Count mismatches for both patterns",
    source: "Love Babbar"
  },
  {
    title: "First Repeated Word",
    description: "Find first repeated word in string",
    topic: "String",
    difficulty: "EASY" as Difficulty,
    platform: "GeeksforGeeks",
    tags: ["String", "Hash Table"],
    companies: ["Amazon"],
    frequency: 4,
    approach: "Hash set with word parsing",
    source: "Love Babbar"
  },
  {
    title: "Minimum Swaps Bracket Balancing",
    description: "Minimum swaps for bracket balancing",
    topic: "String",
    difficulty: "MEDIUM" as Difficulty,
    platform: "GeeksforGeeks",
    tags: ["String", "Greedy"],
    companies: ["Amazon"],
    frequency: 5,
    approach: "Count unmatched brackets",
    source: "Love Babbar"
  },
  {
    title: "Generate Valid IP Addresses",
    description: "Generate all possible valid IP addresses from string",
    topic: "String",
    difficulty: "MEDIUM" as Difficulty,
    leetcodeUrl: "https://leetcode.com/problems/restore-ip-addresses/",
    platform: "LeetCode",
    tags: ["String", "Backtracking"],
    companies: ["Amazon", "Google", "Facebook"],
    frequency: 6,
    approach: "Backtracking with validation",
    source: "Both"
  },
  {
    title: "Smallest Window Containing All Characters",
    description: "Find smallest window containing all characters of string itself",
    topic: "String",
    difficulty: "HARD" as Difficulty,
    platform: "GeeksforGeeks",
    tags: ["String", "Sliding Window"],
    companies: ["Amazon", "Google"],
    frequency: 7,
    approach: "Sliding window with character frequency",
    source: "Love Babbar"
  },
  {
    title: "Rearrange Characters No Adjacent Same",
    description: "Rearrange characters so no two adjacent are same",
    topic: "String",
    difficulty: "MEDIUM" as Difficulty,
    leetcodeUrl: "https://leetcode.com/problems/reorganize-string/",
    platform: "LeetCode",
    tags: ["Hash Table", "String", "Greedy", "Sorting", "Heap"],
    companies: ["Amazon", "Google", "Facebook"],
    frequency: 7,
    approach: "Greedy with priority queue",
    source: "Both"
  },
  {
    title: "Minimum Characters for Front Palindrome",
    description: "Minimum characters to add at front to make palindrome",
    topic: "String",
    difficulty: "HARD" as Difficulty,
    platform: "GeeksforGeeks",
    tags: ["String", "KMP"],
    companies: ["Amazon", "Microsoft"],
    frequency: 6,
    approach: "KMP algorithm with string reversal",
    source: "Love Babbar"
  },
  {
    title: "Group Anagrams Together",
    description: "Group anagrams together from array of strings",
    topic: "String",
    difficulty: "MEDIUM" as Difficulty,
    leetcodeUrl: "https://leetcode.com/problems/group-anagrams/",
    platform: "LeetCode",
    tags: ["Array", "Hash Table", "String", "Sorting"],
    companies: ["Amazon", "Facebook", "Google", "Uber"],
    frequency: 9,
    timeComplexity: "O(n*k*log(k))",
    spaceComplexity: "O(n*k)",
    approach: "Sort each string and use as hash key",
    source: "Both"
  },
  {
    title: "Minimum Window Substring",
    description: "Find minimum window substring containing all characters of t",
    topic: "String",
    difficulty: "HARD" as Difficulty,
    leetcodeUrl: "https://leetcode.com/problems/minimum-window-substring/",
    platform: "LeetCode",
    tags: ["Hash Table", "String", "Sliding Window"],
    companies: ["Amazon", "Facebook", "Google", "Microsoft"],
    frequency: 9,
    timeComplexity: "O(|s| + |t|)",
    spaceComplexity: "O(|s| + |t|)",
    approach: "Sliding window with character frequency map",
    source: "Both"
  },
  {
    title: "Remove Adjacent Duplicates Recursively",
    description: "Recursively remove all adjacent duplicates",
    topic: "String",
    difficulty: "MEDIUM" as Difficulty,
    platform: "GeeksforGeeks",
    tags: ["String", "Stack"],
    companies: ["Amazon"],
    frequency: 5,
    approach: "Stack-based removal",
    source: "Love Babbar"
  },
  {
    title: "String Matching with Wildcards",
    description: "String matching with wildcard characters",
    topic: "String",
    difficulty: "HARD" as Difficulty,
    leetcodeUrl: "https://leetcode.com/problems/wildcard-matching/",
    platform: "LeetCode",
    tags: ["String", "Dynamic Programming", "Greedy", "Recursion"],
    companies: ["Amazon", "Google", "Facebook"],
    frequency: 7,
    approach: "Dynamic programming or greedy matching",
    source: "Both"
  },
  {
    title: "Transform One String to Another",
    description: "Transform one string to another using minimum operations",
    topic: "String",
    difficulty: "HARD" as Difficulty,
    platform: "GeeksforGeeks",
    tags: ["String", "Dynamic Programming"],
    companies: ["Amazon", "Google"],
    frequency: 6,
    approach: "Edit distance with specific operations",
    source: "Love Babbar"
  },
  {
    title: "Check Isomorphic Strings",
    description: "Check if two strings are isomorphic",
    topic: "String",
    difficulty: "EASY" as Difficulty,
    leetcodeUrl: "https://leetcode.com/problems/isomorphic-strings/",
    platform: "LeetCode",
    tags: ["Hash Table", "String"],
    companies: ["Amazon", "LinkedIn", "Google"],
    frequency: 6,
    approach: "Character mapping with hash tables",
    source: "Both"
  },

  // ========== SEARCHING AND SORTING ==========
  {
    title: "First and Last Position in Sorted Array",
    description: "Find first and last position of element in sorted array",
    topic: "Binary Search",
    difficulty: "MEDIUM" as Difficulty,
    leetcodeUrl: "https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/",
    platform: "LeetCode",
    tags: ["Array", "Binary Search"],
    companies: ["Amazon", "Microsoft", "Google"],
    frequency: 8,
    timeComplexity: "O(log n)",
    spaceComplexity: "O(1)",
    approach: "Two binary searches for lower and upper bounds",
    source: "Both"
  },
  {
    title: "Fixed Point in Array",
    description: "Find fixed point where value equals index in sorted array",
    topic: "Binary Search",
    difficulty: "EASY" as Difficulty,
    platform: "GeeksforGeeks",
    tags: ["Array", "Binary Search"],
    companies: ["Amazon", "Microsoft"],
    frequency: 6,
    approach: "Binary search with index comparison",
    source: "Love Babbar"
  },
  {
    title: "Search in Rotated Sorted Array",
    description: "Search target in rotated sorted array",
    topic: "Binary Search",
    difficulty: "MEDIUM" as Difficulty,
    leetcodeUrl: "https://leetcode.com/problems/search-in-rotated-sorted-array/",
    platform: "LeetCode",
    tags: ["Array", "Binary Search"],
    companies: ["Amazon", "Microsoft", "Google", "Facebook"],
    frequency: 9,
    timeComplexity: "O(log n)",
    spaceComplexity: "O(1)",
    approach: "Modified binary search with rotation handling",
    source: "Both"
  },
  {
    title: "Square Root of Integer",
    description: "Find square root of non-negative integer",
    topic: "Binary Search",
    difficulty: "EASY" as Difficulty,
    leetcodeUrl: "https://leetcode.com/problems/sqrtx/",
    platform: "LeetCode",
    tags: ["Math", "Binary Search"],
    companies: ["Amazon", "Microsoft", "Apple"],
    frequency: 7,
    timeComplexity: "O(log n)",
    spaceComplexity: "O(1)",
    approach: "Binary search on answer",
    source: "Both"
  },
  {
    title: "Find Peak Element",
    description: "Find peak element in array where peak is greater than neighbors",
    topic: "Binary Search",
    difficulty: "MEDIUM" as Difficulty,
    leetcodeUrl: "https://leetcode.com/problems/find-peak-element/",
    platform: "LeetCode",
    tags: ["Array", "Binary Search"],
    companies: ["Amazon", "Google", "Microsoft"],
    frequency: 7,
    timeComplexity: "O(log n)",
    spaceComplexity: "O(1)",
    approach: "Binary search with slope comparison",
    source: "Both"
  },
  {
    title: "Aggressive Cows",
    description: "Place cows in stalls with maximum minimum distance",
    topic: "Binary Search",
    difficulty: "HARD" as Difficulty,
    platform: "SPOJ",
    tags: ["Binary Search", "Greedy"],
    companies: ["Amazon", "Google"],
    frequency: 7,
    approach: "Binary search on answer with greedy placement",
    source: "Love Babbar"
  },
  {
    title: "Book Allocation Problem",
    description: "Allocate books to students minimizing maximum pages",
    topic: "Binary Search",
    difficulty: "MEDIUM" as Difficulty,
    platform: "GeeksforGeeks",
    tags: ["Array", "Binary Search"],
    companies: ["Amazon", "Microsoft"],
    frequency: 7,
    approach: "Binary search on answer",
    source: "Love Babbar"
  },
  {
    title: "Painter Partition Problem",
    description: "Partition array to minimize maximum sum",
    topic: "Binary Search",
    difficulty: "MEDIUM" as Difficulty,
    platform: "GeeksforGeeks",
    tags: ["Array", "Binary Search", "Dynamic Programming"],
    companies: ["Amazon", "Microsoft"],
    frequency: 6,
    approach: "Binary search on answer or DP",
    source: "Love Babbar"
  },
  {
    title: "Find Repeating and Missing",
    description: "Find repeating and missing number in array",
    topic: "Array",
    difficulty: "MEDIUM" as Difficulty,
    platform: "GeeksforGeeks",
    tags: ["Array", "Math"],
    companies: ["Amazon", "Microsoft"],
    frequency: 7,
    approach: "Mathematical equations or XOR",
    source: "Love Babbar"
  },
  {
    title: "Majority Element",
    description: "Find majority element that appears more than n/2 times",
    topic: "Array",
    difficulty: "EASY" as Difficulty,
    leetcodeUrl: "https://leetcode.com/problems/majority-element/",
    platform: "LeetCode",
    tags: ["Array", "Hash Table", "Divide and Conquer", "Sorting", "Counting"],
    companies: ["Amazon", "Microsoft", "Adobe"],
    frequency: 8,
    timeComplexity: "O(n)",
    spaceComplexity: "O(1)",
    approach: "Boyer-Moore voting algorithm",
    source: "Both"
  },

  // ========== MORE LINKED LISTS ==========
  {
    title: "Remove Duplicates from Sorted List",
    description: "Remove duplicates from sorted linked list",
    topic: "Linked List",
    difficulty: "EASY" as Difficulty,
    leetcodeUrl: "https://leetcode.com/problems/remove-duplicates-from-sorted-list/",
    platform: "LeetCode",
    tags: ["Linked List"],
    companies: ["Amazon", "Microsoft"],
    frequency: 6,
    approach: "Single pass with pointer manipulation",
    source: "Both"
  },
  {
    title: "Remove Duplicates from Unsorted List",
    description: "Remove duplicates from unsorted linked list",
    topic: "Linked List",
    difficulty: "EASY" as Difficulty,
    platform: "GeeksforGeeks",
    tags: ["Linked List", "Hash Table"],
    companies: ["Amazon", "Microsoft"],
    frequency: 6,
    approach: "Hash set for tracking seen values",
    source: "Love Babbar"
  },
  {
    title: "Move Last Element to Front",
    description: "Move last element to front of linked list",
    topic: "Linked List",
    difficulty: "EASY" as Difficulty,
    platform: "GeeksforGeeks",
    tags: ["Linked List"],
    companies: ["Amazon"],
    frequency: 4,
    approach: "Two pointers to find last and second last",
    source: "Love Babbar"
  },
  {
    title: "Add 1 to Linked List Number",
    description: "Add 1 to number represented as linked list",
    topic: "Linked List",
    difficulty: "MEDIUM" as Difficulty,
    platform: "GeeksforGeeks",
    tags: ["Linked List", "Math"],
    companies: ["Amazon", "Microsoft"],
    frequency: 6,
    approach: "Reverse, add, reverse or recursion",
    source: "Love Babbar"
  },
  {
    title: "Add Two Numbers Represented as Lists",
    description: "Add two numbers represented as linked lists",
    topic: "Linked List",
    difficulty: "MEDIUM" as Difficulty,
    leetcodeUrl: "https://leetcode.com/problems/add-two-numbers/",
    platform: "LeetCode",
    tags: ["Linked List", "Math", "Recursion"],
    companies: ["Amazon", "Microsoft", "Google", "Apple"],
    frequency: 9,
    timeComplexity: "O(max(m,n))",
    spaceComplexity: "O(max(m,n))",
    approach: "Simulate addition with carry",
    source: "Both"
  },
  {
    title: "Intersection Point of Two Lists",
    description: "Find intersection point of two linked lists",
    topic: "Linked List",
    difficulty: "EASY" as Difficulty,
    leetcodeUrl: "https://leetcode.com/problems/intersection-of-two-linked-lists/",
    platform: "LeetCode",
    tags: ["Hash Table", "Linked List", "Two Pointers"],
    companies: ["Amazon", "Microsoft", "Apple"],
    frequency: 8,
    timeComplexity: "O(m+n)",
    spaceComplexity: "O(1)",
    approach: "Two pointers switching lists",
    source: "Both"
  },
  {
    title: "Merge K Sorted Lists",
    description: "Merge k sorted linked lists",
    topic: "Linked List",
    difficulty: "HARD" as Difficulty,
    leetcodeUrl: "https://leetcode.com/problems/merge-k-sorted-lists/",
    platform: "LeetCode",
    tags: ["Linked List", "Divide and Conquer", "Heap", "Merge Sort"],
    companies: ["Amazon", "Microsoft", "Google", "Facebook"],
    frequency: 9,
    timeComplexity: "O(n log k)",
    spaceComplexity: "O(log k)",
    approach: "Divide and conquer or min heap",
    source: "Both"
  },
  {
    title: "Multiply Two Lists",
    description: "Multiply two numbers represented as linked lists",
    topic: "Linked List",
    difficulty: "MEDIUM" as Difficulty,
    platform: "GeeksforGeeks",
    tags: ["Linked List", "Math"],
    companies: ["Amazon"],
    frequency: 5,
    approach: "Convert to numbers and multiply",
    source: "Love Babbar"
  },
  {
    title: "Delete N Nodes After M Nodes",
    description: "Delete N nodes after every M nodes",
    topic: "Linked List",
    difficulty: "EASY" as Difficulty,
    platform: "GeeksforGeeks",
    tags: ["Linked List"],
    companies: ["Amazon"],
    frequency: 4,
    approach: "Traverse and skip nodes",
    source: "Love Babbar"
  },
  {
    title: "Merge Sort for Linked List",
    description: "Sort linked list using merge sort",
    topic: "Linked List",
    difficulty: "MEDIUM" as Difficulty,
    leetcodeUrl: "https://leetcode.com/problems/sort-list/",
    platform: "LeetCode",
    tags: ["Linked List", "Two Pointers", "Divide and Conquer", "Sorting", "Merge Sort"],
    companies: ["Amazon", "Microsoft", "Facebook"],
    frequency: 7,
    timeComplexity: "O(n log n)",
    spaceComplexity: "O(log n)",
    approach: "Divide and conquer with merge",
    source: "Both"
  },
  {
    title: "Quicksort for Linked List",
    description: "Sort linked list using quicksort",
    topic: "Linked List",
    difficulty: "MEDIUM" as Difficulty,
    platform: "GeeksforGeeks",
    tags: ["Linked List", "Divide and Conquer", "Quicksort"],
    companies: ["Amazon"],
    frequency: 5,
    approach: "Partition around pivot and recurse",
    source: "Love Babbar"
  },

  // ========== BIT MANIPULATION ==========
  {
    title: "Count Set Bits",
    description: "Count number of set bits in an integer",
    topic: "Bit Manipulation",
    difficulty: "EASY" as Difficulty,
    leetcodeUrl: "https://leetcode.com/problems/number-of-1-bits/",
    platform: "LeetCode",
    tags: ["Bit Manipulation"],
    companies: ["Amazon", "Microsoft", "Apple"],
    frequency: 7,
    timeComplexity: "O(1)",
    spaceComplexity: "O(1)",
    approach: "Brian Kernighan's algorithm",
    source: "Both"
  },
  {
    title: "Power of Two",
    description: "Check if number is power of two",
    topic: "Bit Manipulation",
    difficulty: "EASY" as Difficulty,
    leetcodeUrl: "https://leetcode.com/problems/power-of-two/",
    platform: "LeetCode",
    tags: ["Math", "Bit Manipulation", "Recursion"],
    companies: ["Amazon", "Microsoft", "Google"],
    frequency: 6,
    timeComplexity: "O(1)",
    spaceComplexity: "O(1)",
    approach: "Check if n & (n-1) == 0",
    source: "Both"
  },
  {
    title: "Count Total Set Bits",
    description: "Count total set bits in all numbers from 1 to n",
    topic: "Bit Manipulation",
    difficulty: "MEDIUM" as Difficulty,
    platform: "GeeksforGeeks",
    tags: ["Bit Manipulation", "Math"],
    companies: ["Amazon", "Microsoft"],
    frequency: 6,
    approach: "Pattern observation or DP",
    source: "Love Babbar"
  },
  {
    title: "Power Set using Bit Manipulation",
    description: "Generate all subsets using bit manipulation",
    topic: "Bit Manipulation",
    difficulty: "MEDIUM" as Difficulty,
    platform: "GeeksforGeeks",
    tags: ["Bit Manipulation", "Backtracking"],
    companies: ["Amazon", "Google"],
    frequency: 7,
    approach: "Iterate through all bit patterns",
    source: "Love Babbar"
  },
  {
    title: "Find Position of Set Bit",
    description: "Find position of only set bit",
    topic: "Bit Manipulation",
    difficulty: "EASY" as Difficulty,
    platform: "GeeksforGeeks",
    tags: ["Bit Manipulation"],
    companies: ["Amazon"],
    frequency: 5,
    approach: "Check if power of 2 and find position",
    source: "Love Babbar"
  },
  {
    title: "Copy Set Bits in Range",
    description: "Copy set bits in a range from one number to another",
    topic: "Bit Manipulation",
    difficulty: "MEDIUM" as Difficulty,
    platform: "GeeksforGeeks",
    tags: ["Bit Manipulation"],
    companies: ["Amazon"],
    frequency: 4,
    approach: "Create mask and apply operations",
    source: "Love Babbar"
  },
  {
    title: "Divide Two Integers",
    description: "Divide two integers without using multiplication or division",
    topic: "Bit Manipulation",
    difficulty: "MEDIUM" as Difficulty,
    leetcodeUrl: "https://leetcode.com/problems/divide-two-integers/",
    platform: "LeetCode",
    tags: ["Math", "Bit Manipulation"],
    companies: ["Amazon", "Facebook", "Microsoft"],
    frequency: 7,
    timeComplexity: "O(log n)",
    spaceComplexity: "O(1)",
    approach: "Bit manipulation with left shift",
    source: "Both"
  },
  {
    title: "Square using Bit Manipulation",
    description: "Calculate square of number using bit manipulation",
    topic: "Bit Manipulation",
    difficulty: "MEDIUM" as Difficulty,
    platform: "GeeksforGeeks",
    tags: ["Bit Manipulation", "Math"],
    companies: ["Amazon"],
    frequency: 4,
    approach: "Bit shifting and addition",
    source: "Love Babbar"
  },

  // ========== FINAL COMPREHENSIVE QUESTIONS ==========
  {
    title: "LRU Cache",
    description: "Design and implement LRU cache",
    topic: "Design",
    difficulty: "MEDIUM" as Difficulty,
    leetcodeUrl: "https://leetcode.com/problems/lru-cache/",
    platform: "LeetCode",
    tags: ["Hash Table", "Linked List", "Design"],
    companies: ["Amazon", "Microsoft", "Google", "Facebook"],
    frequency: 10,
    timeComplexity: "O(1)",
    spaceComplexity: "O(capacity)",
    approach: "Hash table + doubly linked list",
    source: "System Design"
  },
  {
    title: "Serialize and Deserialize Binary Tree",
    description: "Design algorithm to serialize and deserialize binary tree",
    topic: "Binary Tree",
    difficulty: "HARD" as Difficulty,
    leetcodeUrl: "https://leetcode.com/problems/serialize-and-deserialize-binary-tree/",
    platform: "LeetCode",
    tags: ["String", "Tree", "DFS", "BFS", "Design"],
    companies: ["Amazon", "Google", "Facebook", "LinkedIn"],
    frequency: 8,
    timeComplexity: "O(n)",
    spaceComplexity: "O(n)",
    approach: "Preorder traversal with markers",
    source: "Tree Serialization"
  },
  {
    title: "Word Ladder",
    description: "Find shortest transformation sequence from beginWord to endWord",
    topic: "Graph",
    difficulty: "HARD" as Difficulty,
    leetcodeUrl: "https://leetcode.com/problems/word-ladder/",
    platform: "LeetCode",
    tags: ["Hash Table", "String", "BFS"],
    companies: ["Amazon", "Facebook", "Google", "LinkedIn"],
    frequency: 8,
    timeComplexity: "O(M²×N)",
    spaceComplexity: "O(M²×N)",
    approach: "BFS with word transformations",
    source: "BFS Applications"
  },
  {
    title: "Meeting Rooms II",
    description: "Find minimum number of conference rooms required",
    topic: "Interval",
    difficulty: "MEDIUM" as Difficulty,
    platform: "LeetCode",
    tags: ["Array", "Two Pointers", "Greedy", "Sorting", "Heap"],
    companies: ["Amazon", "Facebook", "Google", "Microsoft"],
    frequency: 9,
    timeComplexity: "O(n log n)",
    spaceComplexity: "O(n)",
    approach: "Sort and use min heap",
    source: "Interval Scheduling"
  },
  {
    title: "Pow(x, n)",
    description: "Implement pow(x, n) efficiently",
    topic: "Math",
    difficulty: "MEDIUM" as Difficulty,
    leetcodeUrl: "https://leetcode.com/problems/powx-n/",
    platform: "LeetCode",
    tags: ["Math", "Recursion"],
    companies: ["Amazon", "Facebook", "Google", "LinkedIn"],
    frequency: 8,
    timeComplexity: "O(log n)",
    spaceComplexity: "O(log n)",
    approach: "Fast exponentiation using recursion",
    source: "Mathematical Algorithms"
  },
  {
    title: "Subarray Sum Equals K",
    description: "Find total number of continuous subarrays whose sum equals k",
    topic: "Array",
    difficulty: "MEDIUM" as Difficulty,
    leetcodeUrl: "https://leetcode.com/problems/subarray-sum-equals-k/",
    platform: "LeetCode",
    tags: ["Array", "Hash Table", "Prefix Sum"],
    companies: ["Facebook", "Amazon", "Google", "Microsoft"],
    frequency: 9,
    timeComplexity: "O(n)",
    spaceComplexity: "O(n)",
    approach: "Prefix sum with hash map",
    source: "Prefix Sum Pattern"
  },
  {
    title: "Product of Array Except Self",
    description: "Return array where output[i] equals product of all elements except nums[i]",
    topic: "Array",
    difficulty: "MEDIUM" as Difficulty,
    leetcodeUrl: "https://leetcode.com/problems/product-of-array-except-self/",
    platform: "LeetCode",
    tags: ["Array", "Prefix Sum"],
    companies: ["Amazon", "Microsoft", "Apple", "Facebook"],
    frequency: 10,
    timeComplexity: "O(n)",
    spaceComplexity: "O(1)",
    approach: "Two passes with left and right products",
    source: "FAANG Favorites"
  },
  {
    title: "Sliding Window Maximum",
    description: "Return max value in each sliding window of size k",
    topic: "Sliding Window",
    difficulty: "HARD" as Difficulty,
    leetcodeUrl: "https://leetcode.com/problems/sliding-window-maximum/",
    platform: "LeetCode",
    tags: ["Array", "Queue", "Sliding Window", "Heap"],
    companies: ["Amazon", "Microsoft", "Google"],
    frequency: 8,
    timeComplexity: "O(n)",
    spaceComplexity: "O(k)",
    approach: "Deque to maintain window maximum",
    source: "Sliding Window Advanced"
  },
  {
    title: "Design Add and Search Words Data Structure",
    description: "Design data structure that supports adding words and searching with wildcards",
    topic: "Trie",
    difficulty: "MEDIUM" as Difficulty,
    leetcodeUrl: "https://leetcode.com/problems/design-add-and-search-words-data-structure/",
    platform: "LeetCode",
    tags: ["String", "DFS", "Design", "Trie"],
    companies: ["Amazon", "Facebook", "Google"],
    frequency: 7,
    timeComplexity: "O(n) for add, O(n*26^k) for search",
    spaceComplexity: "O(total characters)",
    approach: "Trie with DFS for wildcard search",
    source: "Trie Applications"
  },
  {
    title: "Course Schedule",
    description: "Determine if you can finish all courses given prerequisites",
    topic: "Graph",
    difficulty: "MEDIUM" as Difficulty,
    leetcodeUrl: "https://leetcode.com/problems/course-schedule/",
    platform: "LeetCode",
    tags: ["DFS", "BFS", "Graph", "Topological Sort"],
    companies: ["Amazon", "Microsoft", "Google"],
    frequency: 8,
    timeComplexity: "O(V+E)",
    spaceComplexity: "O(V+E)",
    approach: "Topological sorting using DFS or BFS",
    source: "Topological Sort"
  },

  // ========== BIG TECH FAVORITES - AMAZON ==========
  {
    title: "Amazon's Two Sum Variants",
    description: "Find two numbers that add up to target in sorted array",
    topic: "Array",
    difficulty: "EASY" as Difficulty,
    leetcodeUrl: "https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/",
    platform: "LeetCode",
    tags: ["Array", "Two Pointers", "Binary Search"],
    companies: ["Amazon", "Google", "Facebook"],
    frequency: 10,
    timeComplexity: "O(n)",
    spaceComplexity: "O(1)",
    approach: "Two pointers from both ends",
    source: "Amazon Favorites"
  },
  {
    title: "Number of Islands",
    description: "Count number of islands in 2D binary grid",
    topic: "Graph",
    difficulty: "MEDIUM" as Difficulty,
    leetcodeUrl: "https://leetcode.com/problems/number-of-islands/",
    platform: "LeetCode",
    tags: ["Array", "DFS", "BFS", "Union Find", "Matrix"],
    companies: ["Amazon", "Microsoft", "Google", "Facebook"],
    frequency: 10,
    timeComplexity: "O(M×N)",
    spaceComplexity: "O(M×N)",
    approach: "DFS or BFS to mark connected components",
    source: "Amazon Top 50"
  },
  {
    title: "Copy List with Random Pointer",
    description: "Deep copy linked list with random pointers",
    topic: "Linked List",
    difficulty: "MEDIUM" as Difficulty,
    leetcodeUrl: "https://leetcode.com/problems/copy-list-with-random-pointer/",
    platform: "LeetCode",
    tags: ["Hash Table", "Linked List"],
    companies: ["Amazon", "Microsoft", "Google"],
    frequency: 9,
    timeComplexity: "O(n)",
    spaceComplexity: "O(n)",
    approach: "Hash map or interleaving nodes",
    source: "Amazon Interviews"
  },
  {
    title: "Critical Connections in Network",
    description: "Find critical connections (bridges) in network",
    topic: "Graph",
    difficulty: "HARD" as Difficulty,
    leetcodeUrl: "https://leetcode.com/problems/critical-connections-in-a-network/",
    platform: "LeetCode",
    tags: ["Graph", "DFS", "Tarjan's Algorithm"],
    companies: ["Amazon", "Google", "Facebook"],
    frequency: 8,
    timeComplexity: "O(V+E)",
    spaceComplexity: "O(V+E)",
    approach: "Tarjan's bridge-finding algorithm",
    source: "Amazon System Design"
  },
  {
    title: "K Closest Points to Origin",
    description: "Find K closest points to origin",
    topic: "Heap",
    difficulty: "MEDIUM" as Difficulty,
    leetcodeUrl: "https://leetcode.com/problems/k-closest-points-to-origin/",
    platform: "LeetCode",
    tags: ["Array", "Math", "Divide and Conquer", "Geometry", "Sorting", "Heap"],
    companies: ["Amazon", "Facebook", "Asana"],
    frequency: 9,
    timeComplexity: "O(n log k)",
    spaceComplexity: "O(k)",
    approach: "Max heap of size k or quickselect",
    source: "Amazon Logistics"
  },

  // ========== GOOGLE FAVORITES ==========
  {
    title: "Evaluate Reverse Polish Notation",
    description: "Evaluate value of arithmetic expression in Reverse Polish Notation",
    topic: "Stack",
    difficulty: "MEDIUM" as Difficulty,
    leetcodeUrl: "https://leetcode.com/problems/evaluate-reverse-polish-notation/",
    platform: "LeetCode",
    tags: ["Array", "Math", "Stack"],
    companies: ["Google", "Amazon", "LinkedIn"],
    frequency: 8,
    timeComplexity: "O(n)",
    spaceComplexity: "O(n)",
    approach: "Stack for operands and operators",
    source: "Google Coding"
  },
  {
    title: "Valid Sudoku",
    description: "Determine if 9x9 Sudoku board is valid",
    topic: "Hash Table",
    difficulty: "MEDIUM" as Difficulty,
    leetcodeUrl: "https://leetcode.com/problems/valid-sudoku/",
    platform: "LeetCode",
    tags: ["Array", "Hash Table", "Matrix"],
    companies: ["Google", "Amazon", "Apple"],
    frequency: 7,
    timeComplexity: "O(1)",
    spaceComplexity: "O(1)",
    approach: "Hash sets for rows, columns, and boxes",
    source: "Google Games"
  },
  {
    title: "Candy",
    description: "Minimum candies to distribute with rating constraints",
    topic: "Greedy",
    difficulty: "HARD" as Difficulty,
    leetcodeUrl: "https://leetcode.com/problems/candy/",
    platform: "LeetCode",
    tags: ["Array", "Greedy"],
    companies: ["Google", "Amazon", "Microsoft"],
    frequency: 7,
    timeComplexity: "O(n)",
    spaceComplexity: "O(n)",
    approach: "Two passes - left to right, right to left",
    source: "Google Algorithm"
  },
  {
    title: "Remove Invalid Parentheses",
    description: "Remove minimum invalid parentheses to make string valid",
    topic: "String",
    difficulty: "HARD" as Difficulty,
    leetcodeUrl: "https://leetcode.com/problems/remove-invalid-parentheses/",
    platform: "LeetCode",
    tags: ["String", "Backtracking", "BFS"],
    companies: ["Google", "Facebook", "Amazon"],
    frequency: 8,
    timeComplexity: "O(2^n)",
    spaceComplexity: "O(n)",
    approach: "BFS to find minimum removals",
    source: "Google Hard"
  },

  // ========== SEGMENT TREES & ADVANCED DATA STRUCTURES ==========
  {
    title: "Range Sum Query - Mutable",
    description: "Implement segment tree for range sum queries with updates",
    topic: "Segment Tree",
    difficulty: "MEDIUM" as Difficulty,
    leetcodeUrl: "https://leetcode.com/problems/range-sum-query-mutable/",
    platform: "LeetCode",
    tags: ["Array", "Design", "Segment Tree", "Binary Indexed Tree"],
    companies: ["Google", "Amazon", "Microsoft"],
    frequency: 7,
    timeComplexity: "O(log n) update, O(log n) query",
    spaceComplexity: "O(n)",
    approach: "Segment tree with lazy propagation",
    source: "Advanced DS"
  },
  {
    title: "Range Minimum Query",
    description: "Find minimum in range with updates using segment tree",
    topic: "Segment Tree",
    difficulty: "MEDIUM" as Difficulty,
    platform: "GeeksforGeeks",
    tags: ["Array", "Segment Tree", "Sparse Table"],
    companies: ["Google", "Microsoft", "Amazon"],
    frequency: 6,
    timeComplexity: "O(log n)",
    spaceComplexity: "O(n)",
    approach: "Segment tree with range minimum operations",
    source: "Competitive Programming"
  },
  {
    title: "Binary Indexed Tree (Fenwick Tree)",
    description: "Implement Binary Indexed Tree for prefix sum queries",
    topic: "Binary Indexed Tree",
    difficulty: "MEDIUM" as Difficulty,
    platform: "GeeksforGeeks",
    tags: ["Array", "Binary Indexed Tree", "Prefix Sum"],
    companies: ["Google", "Microsoft"],
    frequency: 6,
    timeComplexity: "O(log n)",
    spaceComplexity: "O(n)",
    approach: "BIT with bit manipulation for tree traversal",
    source: "Advanced DS"
  },
  {
    title: "Lazy Propagation in Segment Tree",
    description: "Range update and range query using lazy propagation",
    topic: "Segment Tree",
    difficulty: "HARD" as Difficulty,
    platform: "GeeksforGeeks",
    tags: ["Segment Tree", "Lazy Propagation"],
    companies: ["Google", "Facebook"],
    frequency: 5,
    timeComplexity: "O(log n)",
    spaceComplexity: "O(n)",
    approach: "Segment tree with deferred updates",
    source: "Advanced DS"
  },
  {
    title: "Disjoint Set Union (Union Find)",
    description: "Implement Union Find with path compression and union by rank",
    topic: "Union Find",
    difficulty: "MEDIUM" as Difficulty,
    platform: "GeeksforGeeks",
    tags: ["Union Find", "Graph"],
    companies: ["Google", "Facebook", "Amazon"],
    frequency: 8,
    timeComplexity: "O(α(n))",
    spaceComplexity: "O(n)",
    approach: "Path compression with union by rank",
    source: "Graph Algorithms"
  },
  {
    title: "Count of Range Sum",
    description: "Count number of range sums in given range",
    topic: "Segment Tree",
    difficulty: "HARD" as Difficulty,
    leetcodeUrl: "https://leetcode.com/problems/count-of-range-sum/",
    platform: "LeetCode",
    tags: ["Array", "Binary Search", "Divide and Conquer", "Binary Indexed Tree", "Segment Tree", "Merge Sort"],
    companies: ["Google", "Amazon"],
    frequency: 6,
    timeComplexity: "O(n log n)",
    spaceComplexity: "O(n)",
    approach: "Merge sort with counting or Segment tree",
    source: "Advanced Algorithms"
  }
];

// Function to add questions to database
export async function addCombinedDSAQuestions() {
  try {
    console.log('=== Adding Combined DSA Questions (Love Babbar + Striver) ===');
    
    const importBatchId = uuidv4();
    const importedAt = new Date();
    
    let added = 0;
    let skipped = 0;
    
    for (const questionData of combinedDSAQuestions) {
      try {
        // Check if question already exists
        const existing = await prisma.dSAQuestion.findFirst({
          where: {
            OR: [
              { title: questionData.title },
              {
                AND: [
                  { topic: questionData.topic },
                  { 
                    title: {
                      contains: questionData.title.split(' ')[0],
                      mode: 'insensitive'
                    }
                  }
                ]
              }
            ]
          }
        });
        
        if (existing) {
          console.log(`⏭️ Skipped (exists): ${questionData.title}`);
          skipped++;
          continue;
        }
        
        // Add new question
        await prisma.dSAQuestion.create({
          data: {
            ...questionData,
            isImported: true,
            importBatchId,
            importedAt,
            originalFileName: 'Combined_LoveBabbar_Striver_Sheet'
          }
        });
        
        console.log(`✅ Added: ${questionData.title} (${questionData.topic} - ${questionData.difficulty})`);
        added++;
        
      } catch (error) {
        console.error(`❌ Error adding ${questionData.title}:`, error);
        skipped++;
      }
    }
    
    console.log(`\n🎉 Import Complete!`);
    console.log(`✅ Added: ${added} questions`);
    console.log(`⏭️ Skipped: ${skipped} questions`);
    console.log(`📊 Total processed: ${added + skipped} questions`);
    
    // Show summary by topic
    const topicSummary = combinedDSAQuestions.reduce((acc, q) => {
      acc[q.topic] = (acc[q.topic] || 0) + 1;
      return acc;
    }, {} as Record<string, number>);
    
    console.log('\n=== Questions by Topic ===');
    Object.entries(topicSummary)
      .sort((a, b) => b[1] - a[1])
      .forEach(([topic, count]) => {
        console.log(`${topic}: ${count} questions`);
      });
      
  } catch (error) {
    console.error('❌ Error in import process:', error);
  } finally {
    await prisma.$disconnect();
  }
}

if (require.main === module) {
  addCombinedDSAQuestions().catch(console.error);
}